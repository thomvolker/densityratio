// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// distance
arma::mat distance(const arma::mat& X, const arma::mat& Y, const bool& intercept);
RcppExport SEXP _densityratio_distance(SEXP XSEXP, SEXP YSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const bool& >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(distance(X, Y, intercept));
    return rcpp_result_gen;
END_RCPP
}
// kernel_gaussian
arma::mat kernel_gaussian(const arma::mat& dist, double sigma);
RcppExport SEXP _densityratio_kernel_gaussian(SEXP distSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_gaussian(dist, sigma));
    return rcpp_result_gen;
END_RCPP
}
// make_Phi
arma::mat make_Phi(const arma::mat& dist_nu, double sigma);
RcppExport SEXP _densityratio_make_Phi(SEXP dist_nuSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dist_nu(dist_nuSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(make_Phi(dist_nu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// make_phibar
arma::mat make_phibar(const arma::mat& dist_de, double sigma);
RcppExport SEXP _densityratio_make_phibar(SEXP dist_deSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dist_de(dist_deSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(make_phibar(dist_de, sigma));
    return rcpp_result_gen;
END_RCPP
}
// kliep_compute_alpha
arma::vec kliep_compute_alpha(arma::mat Phi, arma::vec phibar, arma::vec phibar_corr, const arma::vec& epsilon, int nepsilon, int maxit, bool progressbar);
RcppExport SEXP _densityratio_kliep_compute_alpha(SEXP PhiSEXP, SEXP phibarSEXP, SEXP phibar_corrSEXP, SEXP epsilonSEXP, SEXP nepsilonSEXP, SEXP maxitSEXP, SEXP progressbarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phibar(phibarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phibar_corr(phibar_corrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type nepsilon(nepsilonSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< bool >::type progressbar(progressbarSEXP);
    rcpp_result_gen = Rcpp::wrap(kliep_compute_alpha(Phi, phibar, phibar_corr, epsilon, nepsilon, maxit, progressbar));
    return rcpp_result_gen;
END_RCPP
}
// compute_kliep
List compute_kliep(const arma::mat& dist_nu, const arma::mat& dist_de, const arma::vec& sigma, const arma::vec& epsilon, const int& maxit, arma::vec cv_ind, bool progressbar);
RcppExport SEXP _densityratio_compute_kliep(SEXP dist_nuSEXP, SEXP dist_deSEXP, SEXP sigmaSEXP, SEXP epsilonSEXP, SEXP maxitSEXP, SEXP cv_indSEXP, SEXP progressbarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dist_nu(dist_nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dist_de(dist_deSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cv_ind(cv_indSEXP);
    Rcpp::traits::input_parameter< bool >::type progressbar(progressbarSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_kliep(dist_nu, dist_de, sigma, epsilon, maxit, cv_ind, progressbar));
    return rcpp_result_gen;
END_RCPP
}
// kmm_unconstrained_alpha
arma::vec kmm_unconstrained_alpha(arma::mat Kdn, arma::mat Kdd, arma::mat Kd, const double nnu, const double nde);
RcppExport SEXP _densityratio_kmm_unconstrained_alpha(SEXP KdnSEXP, SEXP KddSEXP, SEXP KdSEXP, SEXP nnuSEXP, SEXP ndeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Kdn(KdnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Kdd(KddSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Kd(KdSEXP);
    Rcpp::traits::input_parameter< const double >::type nnu(nnuSEXP);
    Rcpp::traits::input_parameter< const double >::type nde(ndeSEXP);
    rcpp_result_gen = Rcpp::wrap(kmm_unconstrained_alpha(Kdn, Kdd, Kd, nnu, nde));
    return rcpp_result_gen;
END_RCPP
}
// kmm_constrained_alpha
arma::vec kmm_constrained_alpha(arma::mat Kdn, arma::mat Kdd, arma::mat Kd, const int nnu, const int nde, const List settings);
RcppExport SEXP _densityratio_kmm_constrained_alpha(SEXP KdnSEXP, SEXP KddSEXP, SEXP KdSEXP, SEXP nnuSEXP, SEXP ndeSEXP, SEXP settingsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Kdn(KdnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Kdd(KddSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Kd(KdSEXP);
    Rcpp::traits::input_parameter< const int >::type nnu(nnuSEXP);
    Rcpp::traits::input_parameter< const int >::type nde(ndeSEXP);
    Rcpp::traits::input_parameter< const List >::type settings(settingsSEXP);
    rcpp_result_gen = Rcpp::wrap(kmm_constrained_alpha(Kdn, Kdd, Kd, nnu, nde, settings));
    return rcpp_result_gen;
END_RCPP
}
// kmm_cv_loss
double kmm_cv_loss(arma::mat Kdn, arma::mat Kdd, arma::mat Kd, arma::mat Kn, const int& nfolds, const arma::uvec& cv_ind_nu, const arma::uvec& cv_ind_de, bool constrained, List settings);
RcppExport SEXP _densityratio_kmm_cv_loss(SEXP KdnSEXP, SEXP KddSEXP, SEXP KdSEXP, SEXP KnSEXP, SEXP nfoldsSEXP, SEXP cv_ind_nuSEXP, SEXP cv_ind_deSEXP, SEXP constrainedSEXP, SEXP settingsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Kdn(KdnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Kdd(KddSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Kd(KdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Kn(KnSEXP);
    Rcpp::traits::input_parameter< const int& >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type cv_ind_nu(cv_ind_nuSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type cv_ind_de(cv_ind_deSEXP);
    Rcpp::traits::input_parameter< bool >::type constrained(constrainedSEXP);
    Rcpp::traits::input_parameter< List >::type settings(settingsSEXP);
    rcpp_result_gen = Rcpp::wrap(kmm_cv_loss(Kdn, Kdd, Kd, Kn, nfolds, cv_ind_nu, cv_ind_de, constrained, settings));
    return rcpp_result_gen;
END_RCPP
}
// compute_kmm
List compute_kmm(const arma::mat& nu, const arma::mat& de, const arma::mat& ce, const arma::mat& Dd, const arma::vec& sigma, const arma::uvec& cv_ind_nu, const arma::uvec& cv_ind_de, const bool& parallel, int nthreads, const bool& progressbar, const bool& constrained, const List settings);
RcppExport SEXP _densityratio_compute_kmm(SEXP nuSEXP, SEXP deSEXP, SEXP ceSEXP, SEXP DdSEXP, SEXP sigmaSEXP, SEXP cv_ind_nuSEXP, SEXP cv_ind_deSEXP, SEXP parallelSEXP, SEXP nthreadsSEXP, SEXP progressbarSEXP, SEXP constrainedSEXP, SEXP settingsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type de(deSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ce(ceSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Dd(DdSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type cv_ind_nu(cv_ind_nuSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type cv_ind_de(cv_ind_deSEXP);
    Rcpp::traits::input_parameter< const bool& >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type progressbar(progressbarSEXP);
    Rcpp::traits::input_parameter< const bool& >::type constrained(constrainedSEXP);
    Rcpp::traits::input_parameter< const List >::type settings(settingsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_kmm(nu, de, ce, Dd, sigma, cv_ind_nu, cv_ind_de, parallel, nthreads, progressbar, constrained, settings));
    return rcpp_result_gen;
END_RCPP
}
// make_UV
arma::mat make_UV(arma::mat U);
RcppExport SEXP _densityratio_make_UV(SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(make_UV(U));
    return rcpp_result_gen;
END_RCPP
}
// get_sigma_lhss
double get_sigma_lhss(arma::mat dist, arma::vec sigma, bool quantiles);
RcppExport SEXP _densityratio_get_sigma_lhss(SEXP distSEXP, SEXP sigmaSEXP, SEXP quantilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type quantiles(quantilesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_sigma_lhss(dist, sigma, quantiles));
    return rcpp_result_gen;
END_RCPP
}
// lhss_compute_alpha
List lhss_compute_alpha(arma::mat nu, arma::mat de, arma::mat ce, bool symmetric, int m, bool intercept, arma::vec sigma, bool quantiles, arma::vec lambda, int maxit, bool progressbar);
RcppExport SEXP _densityratio_lhss_compute_alpha(SEXP nuSEXP, SEXP deSEXP, SEXP ceSEXP, SEXP symmetricSEXP, SEXP mSEXP, SEXP interceptSEXP, SEXP sigmaSEXP, SEXP quantilesSEXP, SEXP lambdaSEXP, SEXP maxitSEXP, SEXP progressbarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type de(deSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ce(ceSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type quantiles(quantilesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< bool >::type progressbar(progressbarSEXP);
    rcpp_result_gen = Rcpp::wrap(lhss_compute_alpha(nu, de, ce, symmetric, m, intercept, sigma, quantiles, lambda, maxit, progressbar));
    return rcpp_result_gen;
END_RCPP
}
// compute_psihat
arma::mat compute_psihat(arma::mat K, arma::mat Evecs, arma::vec Evals, const int& maxJ, const int& ncol);
RcppExport SEXP _densityratio_compute_psihat(SEXP KSEXP, SEXP EvecsSEXP, SEXP EvalsSEXP, SEXP maxJSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Evecs(EvecsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Evals(EvalsSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxJ(maxJSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_psihat(K, Evecs, Evals, maxJ, ncol));
    return rcpp_result_gen;
END_RCPP
}
// spectral_cv_loss
arma::rowvec spectral_cv_loss(arma::mat Knu, arma::mat Kde, const arma::vec& m, int maxM, const int& nfolds, const arma::uvec& cv_ind_nu, const arma::uvec& cv_ind_de, const int& nthreads, const bool& parallel);
RcppExport SEXP _densityratio_spectral_cv_loss(SEXP KnuSEXP, SEXP KdeSEXP, SEXP mSEXP, SEXP maxMSEXP, SEXP nfoldsSEXP, SEXP cv_ind_nuSEXP, SEXP cv_ind_deSEXP, SEXP nthreadsSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Knu(KnuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Kde(KdeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type maxM(maxMSEXP);
    Rcpp::traits::input_parameter< const int& >::type nfolds(nfoldsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type cv_ind_nu(cv_ind_nuSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type cv_ind_de(cv_ind_deSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(spectral_cv_loss(Knu, Kde, m, maxM, nfolds, cv_ind_nu, cv_ind_de, nthreads, parallel));
    return rcpp_result_gen;
END_RCPP
}
// spectral_dre
List spectral_dre(const arma::mat& dist_nu, const arma::mat& dist_de, const arma::vec& m, const arma::vec& sigma, const arma::uvec& cv_ind_nu, const arma::uvec& cv_ind_de, const bool& parallel, int nthreads, const bool& progressbar);
RcppExport SEXP _densityratio_spectral_dre(SEXP dist_nuSEXP, SEXP dist_deSEXP, SEXP mSEXP, SEXP sigmaSEXP, SEXP cv_ind_nuSEXP, SEXP cv_ind_deSEXP, SEXP parallelSEXP, SEXP nthreadsSEXP, SEXP progressbarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dist_nu(dist_nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dist_de(dist_deSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type cv_ind_nu(cv_ind_nuSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type cv_ind_de(cv_ind_deSEXP);
    Rcpp::traits::input_parameter< const bool& >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type progressbar(progressbarSEXP);
    rcpp_result_gen = Rcpp::wrap(spectral_dre(dist_nu, dist_de, m, sigma, cv_ind_nu, cv_ind_de, parallel, nthreads, progressbar));
    return rcpp_result_gen;
END_RCPP
}
// ulsif_compute_alpha
arma::vec ulsif_compute_alpha(arma::mat Hhat, arma::vec hhat, double lambda);
RcppExport SEXP _densityratio_ulsif_compute_alpha(SEXP HhatSEXP, SEXP hhatSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Hhat(HhatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hhat(hhatSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(ulsif_compute_alpha(Hhat, hhat, lambda));
    return rcpp_result_gen;
END_RCPP
}
// set_threads
int set_threads(int nthreads);
RcppExport SEXP _densityratio_set_threads(SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(set_threads(nthreads));
    return rcpp_result_gen;
END_RCPP
}
// compute_ulsif_loocv
double compute_ulsif_loocv(arma::mat Hhat, arma::mat hhat, double lambda, const int& nnu, const int& nde, const int& nmin, const int& ncol, arma::mat Knu_nmin, arma::mat Kde_nmin);
RcppExport SEXP _densityratio_compute_ulsif_loocv(SEXP HhatSEXP, SEXP hhatSEXP, SEXP lambdaSEXP, SEXP nnuSEXP, SEXP ndeSEXP, SEXP nminSEXP, SEXP ncolSEXP, SEXP Knu_nminSEXP, SEXP Kde_nminSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Hhat(HhatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type hhat(hhatSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nnu(nnuSEXP);
    Rcpp::traits::input_parameter< const int& >::type nde(ndeSEXP);
    Rcpp::traits::input_parameter< const int& >::type nmin(nminSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Knu_nmin(Knu_nminSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Kde_nmin(Kde_nminSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_ulsif_loocv(Hhat, hhat, lambda, nnu, nde, nmin, ncol, Knu_nmin, Kde_nmin));
    return rcpp_result_gen;
END_RCPP
}
// compute_ulsif
List compute_ulsif(const arma::mat& dist_nu, const arma::mat& dist_de, const arma::vec& sigma, const arma::vec& lambda, const bool& parallel, int nthreads, const bool& progressbar);
RcppExport SEXP _densityratio_compute_ulsif(SEXP dist_nuSEXP, SEXP dist_deSEXP, SEXP sigmaSEXP, SEXP lambdaSEXP, SEXP parallelSEXP, SEXP nthreadsSEXP, SEXP progressbarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dist_nu(dist_nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dist_de(dist_deSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type progressbar(progressbarSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_ulsif(dist_nu, dist_de, sigma, lambda, parallel, nthreads, progressbar));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_densityratio_distance", (DL_FUNC) &_densityratio_distance, 3},
    {"_densityratio_kernel_gaussian", (DL_FUNC) &_densityratio_kernel_gaussian, 2},
    {"_densityratio_make_Phi", (DL_FUNC) &_densityratio_make_Phi, 2},
    {"_densityratio_make_phibar", (DL_FUNC) &_densityratio_make_phibar, 2},
    {"_densityratio_kliep_compute_alpha", (DL_FUNC) &_densityratio_kliep_compute_alpha, 7},
    {"_densityratio_compute_kliep", (DL_FUNC) &_densityratio_compute_kliep, 7},
    {"_densityratio_kmm_unconstrained_alpha", (DL_FUNC) &_densityratio_kmm_unconstrained_alpha, 5},
    {"_densityratio_kmm_constrained_alpha", (DL_FUNC) &_densityratio_kmm_constrained_alpha, 6},
    {"_densityratio_kmm_cv_loss", (DL_FUNC) &_densityratio_kmm_cv_loss, 9},
    {"_densityratio_compute_kmm", (DL_FUNC) &_densityratio_compute_kmm, 12},
    {"_densityratio_make_UV", (DL_FUNC) &_densityratio_make_UV, 1},
    {"_densityratio_get_sigma_lhss", (DL_FUNC) &_densityratio_get_sigma_lhss, 3},
    {"_densityratio_lhss_compute_alpha", (DL_FUNC) &_densityratio_lhss_compute_alpha, 11},
    {"_densityratio_compute_psihat", (DL_FUNC) &_densityratio_compute_psihat, 5},
    {"_densityratio_spectral_cv_loss", (DL_FUNC) &_densityratio_spectral_cv_loss, 9},
    {"_densityratio_spectral_dre", (DL_FUNC) &_densityratio_spectral_dre, 9},
    {"_densityratio_ulsif_compute_alpha", (DL_FUNC) &_densityratio_ulsif_compute_alpha, 3},
    {"_densityratio_set_threads", (DL_FUNC) &_densityratio_set_threads, 1},
    {"_densityratio_compute_ulsif_loocv", (DL_FUNC) &_densityratio_compute_ulsif_loocv, 9},
    {"_densityratio_compute_ulsif", (DL_FUNC) &_densityratio_compute_ulsif, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_densityratio(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
