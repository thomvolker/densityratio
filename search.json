[{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://thomvolker.github.io/densityratio/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://thomvolker.github.io/densityratio/articles/covariate-shift.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Covariate shift adjustment","text":"densityratio package offers user-friendly efficient software density ratio estimation. package contains multiple methods estimating density ratios, aiming estimate ratio probability density functions underlying two groups observations. density ratio estimated using one-shot procedure, without estimating separate densities. package includes different estimation techniques built-hyper-parameter tuning easy--use helper functions summarize visualize results. getting-started vignette, guide user main functionalities package. start explaining concept density ratio estimation, different methods available package. show estimate density ratios using densityratio package example case distribution shift (.e., sample selection bias) adaptation.","code":""},{"path":"https://thomvolker.github.io/densityratio/articles/covariate-shift.html","id":"density-ratio-estimation","dir":"Articles","previous_headings":"","what":"Density ratio estimation","title":"Covariate shift adjustment","text":"goal density ratio estimation estimate ratio two probability density functions, r(x)=pnu(x)pde(x), r(x) = \\frac{p_\\text{nu}(x)}{p_\\text{de}(x)},  based samples numerator (pnup_\\text{nu}) denominator (pdep_\\text{de}) distributions. numerator denominator samples similar (.e., samples common distribution), density ratio close one (multivariate) space data. numerator denominator samples different, density ratio different one regions either numerator denominator samples overrepresented. , density ratio large regions numerator samples high density denominator samples , small regions denominator samples high density numerator samples . Hence, estimated density ratio directly shows samples two distributions differ.","code":""},{"path":"https://thomvolker.github.io/densityratio/articles/covariate-shift.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Covariate shift adjustment","text":"Throughout vignette, illustrate functionality using insurance dataset. dataset publicly available Kaggle (e.g., ) included example data densityratio package. data contain 1338 observations following seven variables: age: age insured (continuous) sex: sex insured (old-fashioned binary variable) bmi: body mass index insured (continuous) children: number children/dependents covered insurance (integer) smoker: whether insured smoker (binary variable) region: region insured (categorical variable categories northwest, northeast, southwest southeast) charges: medical costs billed insurance (continuous) vignette, first discuss mechanics density ratio package distribution comparison, show can used covariate shift problems. examples, create training test data two settings train prediction model training data predict insurance charges test data. first setting, test data randomly drawn insurance data, remaining cases used training (setting denoted rs throughout, short random sample). second setting (denoted cs covariate shift), split data based region variable, training data contains cases southern regions, test data contains cases northern regions. second setting, covariate shift may present, different regions may different distributions covariates used prediction models. Importantly, assume conditional distribution insurance charges given covariates regions. assumption may hold regions also differ unobserved confounders, keep vignette focused, ignore issue . train prediction model southern regions use predict insurance charges northern regions.","code":"library(densityratio)  set.seed(123)  south <- insurance$region %in% c(\"southwest\", \"southeast\") data <- subset(insurance, select = -region)  trainidx_rs <- sample(south)  train_rs <- subset(data, subset = trainidx_rs) test_rs <- subset(data, subset = !trainidx_rs)  train_cs <- subset(data, subset = south) test_cs <- subset(data, subset = !south)"},{"path":"https://thomvolker.github.io/densityratio/articles/covariate-shift.html","id":"estimating-the-density-ratio","dir":"Articles","previous_headings":"","what":"Estimating the density ratio","title":"Covariate shift adjustment","text":"densityratio package includes multiple methods estimating density ratio estimation function (e.g., unconstrained least-squares importance fitting ulsif(), Kullback-Leibler importance estimation procedure kliep(), spectral density ratio estimation spectral(), ). method corresponds slightly different model estimation routine, although methods use non-parametric estimation techniques based Gaussian kernel transformations input data (bandwidth parameter σ\\sigma automatically tuned cross-validation). Moreover, functions operate similarly. user provides two data sets, containing numerator denominator samples, function returns densityratio object, can used examined. densityratio objects can always inspected corresponding summary() plot() methods. follows, use unconstrained least-squares importance fitting (ulsif) estimate density ratio, fast efficient. remove outcome variable charges data passing ulsif() function, typically don’t access outcome variable testing setting. Hence, want reweigh samples based outcome variable. resulting ulsif objects contain estimated density ratio, also optimal parameters can used predict density ratio new data. output shows number inducing points used estimation (number kernels), grid bandwidth (sigma) regularization parameters (lambda) used cross-validation. Moreover, output shows optimal bandwidth parameter, optimal regularization parameter lambda optimal kernel weights, optimized leave-one-cross-validation. Comparing two density ratio objects shows covariate shift, optimal bandwidth parameter regularization parameter somewhat smaller random sampling, implies model sensitive smaller deviations two distributions. One can obtain additional information density ratio object calling summary() function. function shows optimal hyper-parameters, adds information divergence two distributions. Note, , different estimation functions typically use different divergence measures. However, estimation function corresponding divergence measure, one may formally test whether two distributions equal using permutation test. can done setting test = TRUE argument summary() function. summaries indeed show two distributions significantly different random sampling, differ significantly covariate shift setting. Performing permutation test might take time, can sped parallelizing computation (setting parallel = TRUE).","code":"dr_rs <- ulsif(test_rs |> subset(select = -charges),                train_rs |> subset(select = -charges)) dr_cs <- ulsif(test_cs |> subset(select = -charges),                train_cs |> subset(select = -charges)) dr_rs #>  #> Call: #> ulsif(df_numerator = subset(test_rs, select = -charges), df_denominator = subset(train_rs,     select = -charges)) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 200 #>   sigma: num [1:10] 0.813 1.185 1.366 1.528 1.678 ... #>  #> Regularization parameter (lambda): num [1:20] 1000 483.3 233.6 112.9 54.6 ... #>  #> Optimal sigma (loocv): 2.802938 #> Optimal lambda (loocv): 2.976351 #> Optimal kernel weights (loocv): num [1:201] 0.01462 0.01017 0.00757 0.00554 0.00745 ... #> dr_cs #>  #> Call: #> ulsif(df_numerator = subset(test_cs, select = -charges), df_denominator = subset(train_cs,     select = -charges)) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 200 #>   sigma: num [1:10] 0.856 1.225 1.416 1.59 1.753 ... #>  #> Regularization parameter (lambda): num [1:20] 1000 483.3 233.6 112.9 54.6 ... #>  #> Optimal sigma (loocv): 1.224742 #> Optimal lambda (loocv): 0.3359818 #> Optimal kernel weights (loocv): num [1:201] 0.27465 0.0706 0.03061 -0.00883 0.01246 ... #> summary(dr_rs, test = TRUE) #>  #> Call: #> ulsif(df_numerator = subset(test_rs, select = -charges), df_denominator = subset(train_rs,     select = -charges)) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 200 #>  #> Optimal sigma: 2.802938 #> Optimal lambda: 2.976351 #> Optimal kernel weights: num [1:201] 0.01462 0.01017 0.00757 0.00554 0.00745 ... #>   #> Pearson divergence between P(nu) and P(de): 0.02298 #> Pr(P(nu)=P(de)) =  0.28 #> Bonferroni-corrected for testing with r(x) = P(nu)/P(de) AND r*(x) = P(de)/P(nu). summary(dr_cs, test = TRUE) #>  #> Call: #> ulsif(df_numerator = subset(test_cs, select = -charges), df_denominator = subset(train_cs,     select = -charges)) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 200 #>  #> Optimal sigma: 1.224742 #> Optimal lambda: 0.3359818 #> Optimal kernel weights: num [1:201] 0.27465 0.0706 0.03061 -0.00883 0.01246 ... #>   #> Pearson divergence between P(nu) and P(de): 0.1221 #> Pr(P(nu)=P(de)) < .001 #> Bonferroni-corrected for testing with r(x) = P(nu)/P(de) AND r*(x) = P(de)/P(nu)."},{"path":"https://thomvolker.github.io/densityratio/articles/covariate-shift.html","id":"visualization-methods","dir":"Articles","previous_headings":"","what":"Visualization methods","title":"Covariate shift adjustment","text":"densityratio package contains several visualization methods may aid interpreting estimated density ratio. plots functions build ggplot2 library, return customizable ggplot object. default plot() method produces histogram log density ratio values groups samples (numerator denominator). plot() function takes several arguments allow customize plot, samples argument, allows plot numerator denominator samples, logscale argument indicate whether plot log density ratio values, (run ?plot.ulsif information). default plot() summarizes similarity samples density ratio. numerator denominator samples drawn distribution, density ratio close 1 (close 0 log-scale). Moreover, distribution density ratio values similar numerator denominator samples. cases numerator denominator samples different densities, density ratio values different 1, importantly, distributions density ratio values two groups overlap lesser extent. Hence, numerator samples typically estimated density ratio values larger 1, denominator samples density ratio values smaller 1 (, logarithmic scale, larger smaller zero, respectively). exactly see figure : numerator samples (.e., test cases) typically larger estimated density ratio values denominator (training) samples, although difference large (note different scale x-axis compared previous plot). ´ package comes two additional plotting functions: plot_univariate() plot_bivariate(). plot_univariate() plots density ratio values variable separately, can help identify variables informative density ratio. , plot density ratio values variables age bmi (set grid = TRUE add two figures grid). age seems trend: density ratio values quite randomly distributed age range. bmi, pattern different. People numerator sample (.e., test cases), seem lower bmi values general, whereas higher bmi values occur often denominator (training) samples. results higher density ratio lower bmi values, lower density ratio higher bmi values. plot_bivariate() function available plot density ratio values pairs variables (density ratio value mapped color scale). can select variables want create scatterplots using vars, function create scatterplot pair variables. , solely observe pattern bmi, higher values corresponding lower density ratio values.","code":"plot(dr_rs) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. plot(dr_cs) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. plot_univariate(dr_cs, vars = c(\"age\", \"bmi\"), grid = TRUE) plot_bivariate(dr_cs, vars = c(\"age\", \"bmi\", \"children\"), grid = TRUE)"},{"path":"https://thomvolker.github.io/densityratio/articles/covariate-shift.html","id":"covariate-shift","dir":"Articles","previous_headings":"","what":"Covariate shift","title":"Covariate shift adjustment","text":"now show densityratio package can used deal covariate shift. Throughout, attempt predict outcome variable charges using predictor variables age, sex, bmi, children, smoker. common assumption many statistical analyses training test samples drawn distribution. assumption met, least-squares regression (many statistical learning techniques, random forests support vector regression) yield consistent estimates model parameters, sense estimates converge optimal model parameters sample size increases. can obtain estimates model parameters solving least-squares problem β̂=argminβ∑=1n(ytr,−xtr,iTβ)2=(XtrTXtr)−1XtrTytr, \\hat{\\beta} = \\arg\\min_{\\beta} \\sum_{=1}^{n} (y_{\\text{tr}, } - x_{\\text{tr}, }^T \\beta)^2 = (X_\\text{tr}^TX_\\text{tr})^{-1}X_\\text{tr}^Ty_\\text{tr},  XtrX_\\text{tr} design matrix training data, ytry_\\text{tr} vector training outcomes, β\\beta vector model parameters. covariate shift, estimator must longer consistent. fact, consistent analysis model correctly specified. problem can compensated reweighing training samples using estimated density ratio, yields consistent estimator true density ratio model r(x)=ptest(x)ptrain(x). r(x) = \\frac{p_\\text{test}(x)}{p_\\text{train}(x)}.  Since true density ratio model known, can estimate training test data. Consequently, β̂R=argminβ∑=1nr̂tr,(ytr,−xtr,iTβ)2=(XtrTR̂Xtr)−1XtrTR̂ytr, \\hat\\beta_\\text{R} = \\arg\\min_{\\beta} \\sum_{=1}^{n} \\hat{r}_{\\text{tr},} (y_{\\text{tr}, } - x_{\\text{tr}, }^T \\beta)^2 = (X_\\text{tr}^T \\hat{R} X_\\text{tr})^{-1}X_\\text{tr}^T \\hat{R} y_\\text{tr},  density ratio weights r̂tr,\\hat{r}_{\\text{tr},} (collected diagonal matrix R̂\\hat R) obtained estimated density ratio model. , compare performance least squares regression without reweighing training test data. sake illustration, data random sampling, covariate shift setting. first fit least squares regression model training data, predict outcome variable test data, evaluate root mean squared error (RMSE) (R2R^2).","code":""},{"path":"https://thomvolker.github.io/densityratio/articles/covariate-shift.html","id":"performance-under-random-sampling","dir":"Articles","previous_headings":"Covariate shift","what":"Performance under random sampling","title":"Covariate shift adjustment","text":"Without weighting, simply fit regression model follows. can predict outcome variable training test data, evaluate RMSE R2R^2. calculations show RMSE R2R^2 values quite similar training test data, expected random sampling. Subsequently, fit regression model reweighing. can calculate weights training data using predict() function densityratio package, use weights lm() function. see training test performance almost identical unweighted solution, makes sense weights generally close 1.","code":"formula <- charges ~ age + sex + bmi + children + smoker fit_rs <- lm(formula, data = train_rs) y_train_rs <- train_rs$charges y_test_rs  <- test_rs$charges pred_train_rs <- predict(fit_rs, newdata = train_rs) pred_test_rs <- predict(fit_rs, newdata = test_rs)  c(   RMSE_train = sqrt(mean((y_train_rs - pred_train_rs)^2)),   RMSE_test = sqrt(mean((y_test_rs - pred_test_rs)^2)),   R2_tr = 1 - var(y_train_rs - pred_train_rs) / var(y_train_rs),   R2_te = 1 - var(y_test_rs - pred_test_rs) / var(y_test_rs) ) #>   RMSE_train    RMSE_test        R2_tr        R2_te  #> 6142.8279347 5990.7051274    0.7503945    0.7455363 weights_rs <- predict(dr_rs, newdata = train_rs |> subset(select = -charges)) fit_rs_w <- lm(formula, data = train_rs, weights = weights_rs)  pred_train_rs_w <- predict(fit_rs_w, newdata = train_rs) pred_test_rs_w <- predict(fit_rs_w, newdata = test_rs)  c(   RMSE_train = sqrt(mean((y_train_rs - pred_train_rs_w)^2)),   RMSE_test = sqrt(mean((y_test_rs - pred_test_rs_w)^2)),   R2_tr = 1 - var(y_train_rs - pred_train_rs_w) / var(y_train_rs),   R2_te = 1 - var(y_test_rs - pred_test_rs_w) / var(y_test_rs) ) #>   RMSE_train    RMSE_test        R2_tr        R2_te  #> 6143.7668763 5995.5513712    0.7503211    0.7451020"},{"path":"https://thomvolker.github.io/densityratio/articles/covariate-shift.html","id":"performance-under-covariate-shift","dir":"Articles","previous_headings":"Covariate shift","what":"Performance under covariate shift","title":"Covariate shift adjustment","text":"repeat exactly procedure previous section, now setting covariate shift training test data. predict outcome variable training test data, evaluate RMSE R2R^2. Now, performance prediction model decreases substantially test data, expected covariate shift. Hopefully, can account reweighing training data. see get modest improvement RMSE R2R^2 values test data, compared unweighted solution. fact improvement larger can multiple reasons. First, course, estimated density ratio model perfect, may lower performance reweighted regression model. Second, way knowing whether important assumption, namely covariate distribution train test set changed, actually met. well unobserved processes affect selection mechanism outcome. Finally, well performance random sampling even attainable, , example, distribution outcome different two settings. Fitting model test data shows , given model specification, R2=0.71R^2 = 0.71 best can , suggests reweighted model already quite close best possible performance.","code":"fit_cs <- lm(formula, data = train_cs) y_train_cs <- train_cs$charges y_test_cs  <- test_cs$charges pred_train_cs <- predict(fit_cs, newdata = train_cs) pred_test_cs <- predict(fit_cs, newdata = test_cs)  c(   RMSE_train = sqrt(mean((y_train_cs - pred_train_cs)^2)),   RMSE_test = sqrt(mean((y_test_cs - pred_test_cs)^2)),   R2_tr = 1 - var(y_train_cs - pred_train_cs) / var(y_train_cs),   R2_te = 1 - var(y_test_cs - pred_test_cs) / var(y_test_cs) ) #>   RMSE_train    RMSE_test        R2_tr        R2_te  #> 5860.0592523 6434.1388040    0.7944538    0.6722150 weights_cs <- predict(dr_cs, newdata = train_cs |> subset(select = -charges)) fit_cs_w <- lm(formula, data = train_cs, weights = weights_cs)  pred_train_cs_w <- predict(fit_cs_w, newdata = train_cs) pred_test_cs_w <- predict(fit_cs_w, newdata = test_cs)  c(   RMSE_train = sqrt(mean((y_train_cs - pred_train_cs_w)^2)),   RMSE_test = sqrt(mean((y_test_cs - pred_test_cs_w)^2)),   R2_tr = 1 - var(y_train_cs - pred_train_cs_w) / var(y_train_cs),   R2_te = 1 - var(y_test_cs - pred_test_cs_w) / var(y_test_cs) ) #>   RMSE_train    RMSE_test        R2_tr        R2_te  #> 6005.6703347 6191.6472513    0.7841192    0.6971867 lm(formula, data = test_cs) |>   summary() #>  #> Call: #> lm(formula = formula, data = test_cs) #>  #> Residuals: #>    Min     1Q Median     3Q    Max  #>  -8867  -3221  -1166   1187  27132  #>  #> Coefficients: #>               Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -12619.838   1419.984  -8.887  < 2e-16 *** #> age            242.068     17.155  14.111  < 2e-16 *** #> sexmale          8.815    477.858   0.018 0.985287     #> bmi            379.957     43.460   8.743  < 2e-16 *** #> children       759.908    201.638   3.769 0.000179 *** #> smokeryes    21320.176    605.795  35.194  < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 6077 on 643 degrees of freedom #> Multiple R-squared:  0.7061, Adjusted R-squared:  0.7038  #> F-statistic:   309 on 5 and 643 DF,  p-value: < 2.2e-16"},{"path":"https://thomvolker.github.io/densityratio/articles/covariate-shift.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Covariate shift adjustment","text":"vignette, showed densityratio package can used estimate density ratio two data sets, density ratio can used reweigh training data regression model covariate shift.","code":""},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"densityratio","text":"Density ratio estimation powerful tool many applications, two-sample testing, classification, importance weighting evaluation synthetic data utility. tasks can formulated problem distribution comparison, goal estimate two distributions differ. densityratio package provides collection methods estimating density ratio two distributions. vignette, provide overview package demonstrate use distribution comparison tasks.","code":""},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"features","dir":"Articles","previous_headings":"","what":"Features","title":"densityratio","text":"Fast: Computationally intensive code executed C++ using Rcpp RcppArmadillo. Automatic: Good default hyperparameters can optimized cross-validation (recommend understanding parameters using densityratio practice). Complete: Several density ratio estimation methods, unconstrained least-squares importance fitting (ulsif()), Kullback-Leibler importance estimation procedure (kliep()), ratio estimated densities (naive()), extensions high dimensional data (least-squares heterodistributional subspace search, lhss() spectral density ratio estimation, spectral()). User-friendly: Simple user interface, default predict(), print() summary() functions density ratio estimation methods; built-data sets quick testing.","code":""},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"densityratio","text":"Currently, package available GitHub R universe. can download package like : Subsequently, can easily load package standard way.","code":"install.packages('densityratio', repos = 'https://thomvolker.r-universe.dev') library(densityratio)"},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"densityratio","text":"apply methods densityratio package kidiq data introduced Data analysis using regression multilevel/hierarchical models Gelman Hill (2007) also included package. data set contains 434 observations measured five variables: kid_score Child’s IQ score (continuous) mom_hs Whether mother obtained high school degree (binary) mom_iq Mother’s IQ score (continuous) mom_work Whether mother worked first three years child’s life (1: first three years; 2: second third year; 3: parttime first year; 4: fulltime first year) mom_age Mother’s age (continuous) example, split data according mother’s education level, evaluate distributions two groups differ.","code":"high_school <- kidiq |> subset(mom_hs == \"yes\", select = -mom_hs) no_high_school <- kidiq |> subset(mom_hs == \"no\", select = -mom_hs)"},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"estimating-the-density-ratio","dir":"Articles","previous_headings":"","what":"Estimating the density ratio","title":"densityratio","text":"Now two groups want compare, can evaluate distributions two groups differ using density ratio. , express differences two groups terms ratio densities: r(𝐱)=phs(𝐱)pnhs(𝐱), r(\\mathbf{x}) = \\frac{p_{\\text{hs}}(\\mathbf{x})}{p_{\\text{nhs}}(\\mathbf{x})},  subscript refers sample observations mothers high school degree (hs) without (nhs). density ratio r(𝐱)r(\\mathbf{x}) directly shows two distributions differ point 𝐱\\mathbf{x} support data. density ratio larger 1, relatively observations high school group high school group region, vice versa density ratio smaller one. Key almost estimation methods densityratio package, estimate r(𝐱)r(\\mathbf{x}) directly r̂(𝐱)\\hat r(\\mathbf{x}), without estimating densities phs(𝐱)p_{\\text{hs}}(\\mathbf{x}) pnhs(𝐱)p_{\\text{nhs}}(\\mathbf{x}) separately. estimate density ratio, several estimation functions included. kmm(): Kernel Mean Matching estimates density ratio matching means two distributions feature space (Huang et al., 2007). kliep(): Kullback-Leibler Importance Estimation Procedure estimates density ratio Kullback-Leibler divergence true density ratio function minimized (Sugiyama et al., 2007). ulsif(): Unconstrained Least-Squares Importance Fitting provides analytical solution density ratio minimizing least-squares error (Pearson divergence) true density ratio estimated density ratio (Kanamori et al., 2009). lhss(): Least-Squares Heterodistributional Subspace Search extends ulsif() high-dimensional settings searching subspace numerator denominator densities different, estimating density ratio subspace (Sugiyama et al., 2011). spectral(): Spectral density ratio estimation another high-dimensional extension classical density ratio estimation approaches performs dimension reduction spectral decomposition feature space (Izbicki et al., 2014). naive(): Naive density ratio estimation estimating ratio two densities separate density estimation methods two groups. functions appropriate depends problem hand, computational efficiency relative robustness make ulsif() good starting point. high-dimensional data, spectral() lhss() presumably appropriate. estimation functions, except naive(), based principle minimizing divergence true density ratio estimated density ratio, differ divergence minimized constraints imposed estimated density ratio. estimation functions kernel-based thereby non-parametric. Specifically, use following linear model density ratio: r̂(𝐱)=K(𝐱,𝐱′)𝛉̂, \\hat{r}(\\mathbf{x}) = K(\\mathbf{x}, \\mathbf{x'})\\hat{\\mathbf{\\theta}},  kernel function defined K(𝐱,𝐱′)=exp(−||𝐱−𝐱′||2σ2), K(\\mathbf{x}, \\mathbf{x'}) = \\exp \\Bigg(-\\frac{||\\mathbf{x}-\\mathbf{x'}||}{2\\sigma^2} \\Bigg),  σ\\sigma bandwidth kernel 𝛉̂\\hat{\\mathbf{\\theta}} vector parameters estimate data. model linear parameters, estimate density ratio non-linear use kernel function. Currently, use Gaussian kernels methods (plan allow different kernels future version package), uses following transformation data. Note functions lhss() spectral() use slightly involved transformation data perform dimension reduction. estimation functions typically require extensive tuning hyperparameters, bandwidth kernel potentially regularization parameter. tuning taken care -built cross-validation, little user-specification required. , illustrate package estimating density ratio using ulsif().","code":""},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"input-data","dir":"Articles","previous_headings":"Estimating the density ratio","what":"Input data","title":"densityratio","text":"density ratio package expects two data.frames input, one numerator observations, one denominator observations. data sets must variables: assumption violated, function returns error. estimation functions return object respective class (“ulsif”, “kmm”, “kliep”, ). method separate S3 class, differences models, hyperparameters important information included object. Still, classes common interface print(), summary() predict() methods. Printing output object dr provides important information fitted model: output shows number kernels, candidate values bandwidth parameter sigma, candidates regularization parameter lambda optimal values parameters, including weights can used compute density ratio new samples. also possible use different candidate parameters bandwidth regularization parameter, can done different ways.","code":"set.seed(123) # for reproducibility dr <- ulsif(high_school, no_high_school) dr #>  #> Call: #> ulsif(df_numerator = high_school, df_denominator = no_high_school) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 200 #>   sigma: num [1:10] 0.913 1.216 1.393 1.551 1.71 ... #>  #> Regularization parameter (lambda): num [1:20] 1000 483.3 233.6 112.9 54.6 ... #>  #> Optimal sigma (loocv): 1.216132 #> Optimal lambda (loocv): 0.3359818 #> Optimal kernel weights (loocv): num [1:201] 0.3256 -0.054 0.0098 0.1639 0.2047 ... #>"},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"specifying-the-inducing-points-in-the-kernel","dir":"Articles","previous_headings":"Estimating the density ratio > Hyperparameter selection","what":"Specifying the inducing points in the kernel","title":"densityratio","text":"Kernel-based algorithms computationally expensive: original form, distance observations every observation used calculate density ratio. means computational cost scales cubically number observations data. alleviate issue, make use inducing points, subset observations used calculate distance matrix. idea hereof use observations, relatively close share similar information. default, estimation functions use 200 inducing points, randomly sampled numerator denominator data, number can altered changing ncenters parameter. also possible set inducing points manually, providing data.frame variables input data, containing inducing points rows, centers argument. inducing points set manually, ncenters parameter ignored.","code":"dr <- ulsif(high_school, no_high_school, ncenters = 100) dr <- ulsif(high_school, no_high_school, centers = high_school)"},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"bandwidth-and-regularization-parameter","dir":"Articles","previous_headings":"Estimating the density ratio > Hyperparameter selection","what":"Bandwidth and regularization parameter","title":"densityratio","text":"bandwidth kernel regularization parameter tuned automatically using leave-one--cross-validation, can calculated analytically. default, candidate bandwidth values chosen taking quantiles interpoint distance matrix corresponding 10 equally spaced probabilities 0.05 0.95. Changing nsigma parameter results different number quantiles used. default candidate values regularization parameter lambda set 10^{seq(-3, 3, length.= 20)}. changing nlambda, number candidate values sequence can altered, estimate optimal hyperparameters higher precision. also possible specify candidate parameter values manually. bandwidth, can done specifying probabilities used calculation quantiles, using sigma_quantile, specifying bandwidth values directly, using sigma. regularization parameter, can done specifying candidate values directly using lambda. estimation functions similar arguments, although ulsif() lhss() accept regularization parameter.","code":"dr <- ulsif(high_school, no_high_school, nsigma = 20, nlambda = 50) dr #>  #> Call: #> ulsif(df_numerator = high_school, df_denominator = no_high_school,     nsigma = 20, nlambda = 50) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 200 #>   sigma: num [1:20] 0.864 1.082 1.181 1.267 1.346 ... #>  #> Regularization parameter (lambda): num [1:50] 1000 754 569 429 324 ... #>  #> Optimal sigma (loocv): 1.345547 #> Optimal lambda (loocv): 0.4941713 #> Optimal kernel weights (loocv): num [1:201] 0.2213 -0.0349 -0.0107 0.0222 -0.0175 ... #> dr <- ulsif(   high_school,   no_high_school,   sigma = c(1, 1.1, 1.2),   lambda = c(0.01, 0.1, 1) )"},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"intermezzo-bandwidth-regularization-parameter","dir":"Articles","previous_headings":"Estimating the density ratio > Hyperparameter selection > Bandwidth and regularization parameter","what":"Intermezzo: Bandwidth & regularization parameter","title":"densityratio","text":"Bandwidth parameter: bandwidth parameter controls flexible density ratio model . Smaller values place relatively weight observations close observation hand, whereas larger values also borrow information observations away feature space. smaller smaller bandwidth allows model sudden shifts density ratio, might also prone overfitting, larger bandwidth results smoother estimate. , illustrate plotting estimated density ratio single variable, kid_score, estimated large small bandwidth parameter. estimates show density ratio larger larger values kid_score, estimate smaller bandwidth parameter much flexible less smooth. Regularization parameter: regularization parameter controls amount regularization applied model. larger value regularization parameter results smoother estimate, smaller value allows flexibility model. shown , plot estimated density ratio kid_score estimated large small regularization parameter. , estimate smaller regularization parameter much flexible less smooth. Note, , regularization shrinks kernel weights towards zero, estimated density ratio tends zero (one, one might expect). plan investigate future.","code":""},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"scaling-of-the-data","dir":"Articles","previous_headings":"Estimating the density ratio","what":"Scaling of the data","title":"densityratio","text":"default, data scaled estimating density ratio. density ratio distance-based, variables larger variance may contribute distance, thus implicitly deemed important model, variables smaller variance. default, data scaled continuous variables numerator data mean 0 variance 1, categorical variables (factors character strings) turned dummy variables (.e., one-hot encoded). denominator data scaled accordingly, using means variances numerator data. desired, can changed setting scale argument scale = \"denominator\" use denominator means variances, scale = NULL, apply scaling . Additionally, intercept added model matrix default. can turned setting intercept = FALSE.","code":""},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"computational-efficiency","dir":"Articles","previous_headings":"Estimating the density ratio","what":"Computational efficiency","title":"densityratio","text":"Parallel computation natively supported functions density ratio package (current exceptions lhss() kliep(), storage requirements can defeat speedup due parallelization, aim solve future version). Parallel computation can enabled simply setting parallel = TRUE. default, number available threads minus one used, can changed setting nthreads argument. Note number specified nthreads limited number cores machine, also number hyperparameters can estimated parallel (nlambda).","code":"dr <- ulsif(   high_school,   no_high_school,   parallel = TRUE,   nthreads = 10 )"},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"other-estimation-functions","dir":"Articles","previous_headings":"Estimating the density ratio","what":"Other estimation functions","title":"densityratio","text":"section, briefly skim estimation functions available package. functions built principles, use different algorithms different hyperparameters. hyperparameters still tuned automatically, use kk-fold cross-validation instead leave-one-cross-validation. Although kk can set equal minimum number observations numerator denominator data, yields leave-one-cross-validation, might significantly affect computational cost, analytical solution loss available.","code":""},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"kmm","dir":"Articles","previous_headings":"Estimating the density ratio > Other estimation functions","what":"kmm()","title":"densityratio","text":"kernel mean matching algorithm quite similar ulsif() algorithm, starts different perspective: estimate density ratio reweighing denominator samples density ratio results distribution similar possible numerator distribution terms L2 norm. approach require tuning regularization parameter, require tuning bandwidth parameter (defaults ulsif() apply). default, kmm() uses unconstrained optimization estimate density ratio parameters constrained = FALSE, can changed constrained = TRUE use constrained optimization. unconstrained optimization efficient, might yield negative estimates density ratio. Additionally, cross-validation can disabled setting cv = FALSE, number cross-validation folds can altered changing nfold parameter.","code":"dr_kmm <- kmm(   high_school,   no_high_school,   constrained = TRUE,   nfold = 10,   parallel = TRUE )  dr_kmm #>  #> Call: #> kmm(df_numerator = high_school, df_denominator = no_high_school,     constrained = TRUE, nfold = 10, parallel = TRUE) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 200 #>   sigma: num [1:10] 0.989 1.252 1.444 1.606 1.772 ... #>  #> Optimal sigma (10-fold cv): 1.606 #> Optimal kernel weights (10-fold cv):  num [1:200, 1] 3.16e-04 9.80e-05 -6.06e-05 5.70e-06 -2.26e-04 ... #>  #> Optimization parameters: #>   Optimization method:  Constrained"},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"kliep","dir":"Articles","previous_headings":"Estimating the density ratio > Other estimation functions","what":"kliep()","title":"densityratio","text":"Kullback-Leibler importance fitting procedure optimizes somewhat different loss compared ulsif() (Kullback-Leibler loss, rather Pearson loss), include regularization parameter. Whereas ulsif() can estimated analytically, kliep() uses gradient descent algorithm estimate parameters. kliep() function additional arguments optimization routine, maximum number iterations maxit learning rate epsilon. , hyperparameter values cross-validation scheme can altered described .","code":"dr_kliep <- kliep(   high_school,   no_high_school,   nsigma = 20,   maxit = 10000,   epsilon = 0.0001 )  dr_kliep #>  #> Call: #> kliep(df_numerator = high_school, df_denominator = no_high_school,     nsigma = 20, epsilon = 1e-04, maxit = 10000) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 200 #>   sigma: num [1:20] 0.914 1.11 1.207 1.298 1.377 ... #>  #> Optimal sigma (5-fold cv): 0.9142 #> Optimal kernel weights (5-fold cv):  num [1:200, 1] 0.278 0.0659 0.0434 0.1052 0.2286 ... #>  #> Optimization parameters: #>   Learning rate (epsilon): 1e-04 #>   Maximum number of iterations:  10000"},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"lhss","dir":"Articles","previous_headings":"Estimating the density ratio > Other estimation functions","what":"lhss()","title":"densityratio","text":"lhss() function implements least-squares heterodistributional subspace search, high-dimensional extension ulsif(). Rather applying ulsif() original input data, lhss() first finds lower-dimensional subspace numerator denominator samples maximally different, applies ulsif() data projected subspace. Note subspace linear projection original data. method works well subspace indeed exists, might optimal linear projection capture differences two distributions. Parameters lhss() similar ulsif(), although bandwidth values default obtained projection (, nsigma sigma_quantile applied projected data, sigma considered ). One parameter specific lhss() concerns dimensionality subspace, can set changing m, defaults square root number features data. algorithm quite expensive computationally, optimization respect subspace carried . Different choices can considered running algorithm different values m, requires multiple calls lhss function. Currently, parallel computation supported lhss(), planned future version, together native support optimizing dimension subspace. Furthermore, function uses gradient descent algorithm find subspace: number iterations used defaults maxit = 200 can adapted user.","code":"dr_lhss <- lhss(   high_school,   no_high_school,   m = 1 )  dr_lhss #>  #> Call: #> lhss(df_numerator = high_school, df_denominator = no_high_school,     m = 1) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 200 #>   sigma: num [1:10, 1:10] 0.00514 0.04845 0.13661 0.27564 0.4775 ... #>  #> Regularization parameter (lambda): num [1:10] 1000 215.44 46.42 10 2.15 ... #>  #> Subspace dimension (m): 1 #> Optimal sigma: 0.1366127 #> Optimal lambda: 0.1 #> Optimal kernel weights (loocv): num [1:201] 1.3467 0 0.1011 0.0874 0 ... #>"},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"spectral","dir":"Articles","previous_headings":"Estimating the density ratio > Other estimation functions","what":"spectral()","title":"densityratio","text":"spectral() method offers alternative way estimate density ratio high-dimensional settings. Instead reducing dimensionality applying kernel, first applies kernel denominator data performs eigen decomposition find low-dimensional representation. computing eigen decomposition computationally expensive, also possible use subset denominator data compute eigen decomposition (setting parameter ncenters, similarly functions). density ratio estimated reduced space matching numerator data denominator data. goal find weights , applied denominator data kernel space, resulting distribution closely resembles numerator distribution. Similarly lhss(), spectral() function parameter m determines dimensionality subspace, defaults evenly-spaced sequence length 50 1 number centers denominator data (size subset used). , cross-validation used find optimal value m optimal bandwidth parameter. number folds can altered using nfold parameter, cross-validation can disabled setting cv = FALSE. Also, parallel computation supported, can enabled setting parallel = TRUE, potentially different number threads using nthreads parameter.","code":"dr_spectral <- spectral(   high_school,   no_high_school )  dr_spectral #>  #> Call: #> spectral(df_numerator = high_school, df_denominator = no_high_school) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 93 #>   sigma: num [1:10] 1.01 1.28 1.47 1.65 1.82 ... #>  #>  #> Subspace dimension (J): num [1:50] 1 2 4 6 7 9 11 12 14 16 ... #>  #> Optimal sigma: 3.215855 #> Optimal subspace: 16 #> Optimal kernel weights (cv): num [1:16] 0.952 -0.461 -0.755 -0.559 -0.342 ... #>"},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"naive","dir":"Articles","previous_headings":"Estimating the density ratio > Other estimation functions","what":"naive()","title":"densityratio","text":"Naive density ratio estimation estimates density ratio estimating numerator denominator densities separately. use singular value decomposition account relationships features, estimated numerator data project denominator data onto subspace. , dimension reduction readily implemented. Subsequently, make use naive Bayes assumption, implying independence features, estimate density ratio latent space. Hence, naive() function parameter m determines dimensionality subspace, defaults number variables data (dimension reduction). Additionally parameters inherited density() function, used estimate numerator denominator densities. Note advice method, merely included benchmark.","code":"dr_naive <- naive(   high_school,   no_high_school,   m = 2 )  dr_naive #>  #> Call: #> naive(df_numerator = high_school, df_denominator = no_high_school,     m = 2) #>  #> Naive density ratio #>   Number of variables: 4 #>   Number of numerator samples: 341 #>   Number of denominator samples: 93 #>   Numerator density: num [1:341] 3.82 2.43 5.32 2.09 4.13 ... #>   Denominator density: num [1:93] 0.459 0.417 0.629 1.823 0.434 ... #>"},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"summarizing-the-density-ratio-objects","dir":"Articles","previous_headings":"","what":"Summarizing the density ratio objects","title":"densityratio","text":"densityratio package contains several functions help interpreting output estimation method. summary() function provides brief summary estimated object, including optimal hyperparameter values, number inducing points divergence numerator denominator samples. divergence measure reported depends method used. ulsif(), kmm(), lhss() spectral() methods report Pearson divergence, kliep() method reports Kullback-Leibler divergence. naive() method reports squared difference average log density ratio numerator samples average log density ratio denominator samples. divergences hard interpret isolation provide relatively little information two distributions differ, recommend use plotting functionality described next section. Alternatively, goal evaluate distributions formally, divergence measures can used two-sample homogeneity testing.","code":"summary(dr) #>  #> Call: #> ulsif(df_numerator = high_school, df_denominator = no_high_school,     parallel = TRUE, nthreads = 10) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 200 #>  #> Optimal sigma: 1.387557 #> Optimal lambda: 0.6951928 #> Optimal kernel weights: num [1:201] 0.16916 0.00301 0.05082 -0.00791 0.03594 ... #>   #> Pearson divergence between P(nu) and P(de): 0.4149 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'."},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"two-sample-homogeneity-testing","dir":"Articles","previous_headings":"Summarizing the density ratio objects","what":"Two-sample homogeneity testing","title":"densityratio","text":"Two sampling testing functionality readily implemented summary() function, can used setting test = TRUE. estimation function, homogeneity testing performed using permutation test divergence statistic, corresponding pp-value reported. permutation test shows highly unlikely high school high school samples drawn distribution. Intuitively, surprise, quite likely two samples different marginal distributions features. permutation test can also executed parallel, setting parallel = TRUE. Parallel computation performed using pbreplicate function pbapply package. specify cluster, users can directly create supply cluster using parallel::makeCluster() functionality (see documentation pbapply parallel packages). cluster supplied, default cluster created using number available cores minus one.","code":"summary(dr, test = TRUE) #>  #> Call: #> ulsif(df_numerator = high_school, df_denominator = no_high_school,     parallel = TRUE, nthreads = 10) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 200 #>  #> Optimal sigma: 1.387557 #> Optimal lambda: 0.6951928 #> Optimal kernel weights: num [1:201] 0.16916 0.00301 0.05082 -0.00791 0.03594 ... #>   #> Pearson divergence between P(nu) and P(de): 0.4149 #> Pr(P(nu)=P(de)) < .001 #> Bonferroni-corrected for testing with r(x) = P(nu)/P(de) AND r*(x) = P(de)/P(nu). summary(dr, test = TRUE, parallel = TRUE, cluster = 12) #>  #> Call: #> ulsif(df_numerator = high_school, df_denominator = no_high_school,     parallel = TRUE, nthreads = 10) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 200 #>  #> Optimal sigma: 1.387557 #> Optimal lambda: 0.6951928 #> Optimal kernel weights: num [1:201] 0.16916 0.00301 0.05082 -0.00791 0.03594 ... #>   #> Pearson divergence between P(nu) and P(de): 0.4149 #> Pr(P(nu)=P(de)) < .001 #> Bonferroni-corrected for testing with r(x) = P(nu)/P(de) AND r*(x) = P(de)/P(nu)."},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"visualizing-the-density-ratio","dir":"Articles","previous_headings":"","what":"Visualizing the density ratio","title":"densityratio","text":"mere testing sufficient, visualizing density ratio can provide tangible information differences two distributions. plot() function summarizes model output displaying estimated density ratio values. figure shows distribution density ratio values numerator denominator samples (log-scale, improve symmetry). allows evaluate dissimilar two distributions : density ratio values separated, two groups stand apart. , two distributions similar, density ratio close zero log-scale (one original scale) samples, regardless group, importantly, height bars similar groups density ratio values. Additionally, possible plot estimated density ratio values features, univariate bivariate. may help identify features, combinations features, two groups differ. example, plot density ratio values kid_score mom_iq grid (specifying grid = TRUE, default grid = FALSE produces list separate figures feature). figure shows density ratio values seem vary much kid_score, differ substantially mom_iq. , kid_score, samples two groups mix quite well, although might slightly high school samples lower kid_score, resulting slightly lower density ratio values region. mom_iq difference much pronounced: lower values mom_iq typically associated lower density ratio values, indicating typically high school samples lower mom_iq values. Similar figures can created bivariate features, using plot_bivariate() function, allows visualize density ratio values two features time. Now, density ratio values mapped color scale. figure shows density ratio values especially small observations low values mom_iq kid_score. values differ much direction mom_age.","code":"plot(dr) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. plot_univariate(dr, c(\"kid_score\", \"mom_iq\"), grid = TRUE) plot_bivariate(dr, c(\"kid_score\", \"mom_iq\", \"mom_age\"), grid = TRUE)"},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"predicting-the-density-ratio-for-new-cases","dir":"Articles","previous_headings":"","what":"Predicting the density ratio for new cases","title":"densityratio","text":"hood, plotting functionality makes extensive use predict() function, takes fitted density ratio object new data set input, returns predicted density ratio values new cases. default, predict() function predicts density ratio values numerator samples, can changed providing another data set newdata argument. default, predict() function uses optimal hyperparameter values determined cross-validation (cross-validation performed, otherwise returns predicted density ratio values parameters). changing parameters sigma (, applicable, lamdba m), also possible predict density ratio using different parameters. values can alternatively set “”, returns predicted density ratio values parameter values, specific value, returns predicted density ratio values specific hyperparameter value.","code":"predict(dr) |> head() #> , , 1 #>  #>           [,1] #> [1,] 1.4928033 #> [2,] 2.2715889 #> [3,] 2.5855672 #> [4,] 1.9345356 #> [5,] 1.9679638 #> [6,] 0.7939163"},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"densityratio","text":"vignette showed densityratio package can used compare samples two distributions. allows two sample homogeneity testing, visualize differences two distribution.","code":""},{"path":"https://thomvolker.github.io/densityratio/articles/densityratio.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"densityratio","text":"Huang, J., Smola, ., Gretton, K., Borgwardt, K. M., & Schölkopf, B. (2007). Correcting sample selection bias unlabeled data. Advances Neural Information Processing Systems, 19, 601-608. Izbicki, R., Lee, ., & Schafer, C. (2014). High-dimensional density ratio estimation extensions approximate likelihood computation. Proceedings Machine Learning Research, 33, 420-429. Kanamori, T., Hido, S., & Sugiyama, M. (2009). least-squares approach direct importance estimation. Journal Machine Learning Research, 10, 1391-1445. Sugiyama, M., Nakajima, S., Kashima, H., Von Bünau, P., & Kawanabe, M. (2007). Direct importance estimation model selection application covariate shift adaptation. Advances Neural Information Processing Systems, 20. Sugiyama, M., Yamada, M., Von Bünau, P., Suzuki, T., Kanamori, T., & Kawanabe, M. (2011). Direct density-ratio estimation dimensionality reduction via least-squares hetero-distributional subspace search. Neural Networks, 24(2), 183-198.","code":""},{"path":"https://thomvolker.github.io/densityratio/articles/high-dim-testing.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"High dimensional two-sample testing","text":"main use density ratio estimation informative distribution comparison. Informative, allows evaluate two distributions differ every region space data. Consider samples two, potentially different, distributions, pnu(x)p_\\text{nu}(x) pde(x)p_\\text{de}(x). , density ratio two distributions defined r(x)=pnu(x)pde(x), r(x) = \\frac{p_\\text{nu}(x)}{p_\\text{de}(x)},  can take value 00 ∞\\infty, according whether numerator denominator distribution larger location xx, defined multivariate space data. Differences two distributions can summarized using divergence measures (Pearson Kullback-Leibler divergence), divergences measures can used test null hypothesis two distributions equal. vignette, show use density ratio estimation densityratio package perform two-sample testing.","code":""},{"path":"https://thomvolker.github.io/densityratio/articles/high-dim-testing.html","id":"two-sample-testing-with-density-ratios","dir":"Articles","previous_headings":"","what":"Two-sample testing with density ratios","title":"High dimensional two-sample testing","text":"Consider samples two mm-dimensional distributions, pnu(x)p_\\text{nu}(x) pde(x)p_\\text{de}(x), want test null hypothesis samples come distribution (, pnu(x)=pde(x)p_\\text{nu}(x) = p_\\text{de}(x)). interested solely differences means distributions, potentially use (multivariate) tt-test (e.g., Hotelling’s tt-squared), might feasible variance-covariance matrix invertible. However, interested general differences distributions, settle non-parametric test, multivariate extension Kolmogorov-Smirnov test. Alternatively, can use divergence based tests, based divergence measure (see, e.g., Sugiyama et al., 2011), can higher power Kolmogorov-Smirnov test (see, e.g., Volker et al., 2023). densityratio package implements multiple divergence based tests (implemented summary()), dependent estimation method: ulsif(), spectral(), kmm(), lhss() use Pearson divergence, kliep() uses Kullback-Leibler divergence. vignette, use test implemented spectral() density ratio estimation method, particularly tailored towards high-dimensional data. Pearson divergence defined PE(pnu,pde)=12∫(pnu(x)pde(x)−1)2pde(x)dx=12∫r(x)pnu(x)dx−∫r(x)pdedx+12, \\begin{aligned} PE(p_\\text{nu}, p_\\text{de}) &= \\frac 1 2 \\int \\left( \\frac{p_\\text{nu}(x)}{p_\\text{de}(x)} - 1 \\right)^2 p_\\text{de}(x) dx \\\\ &= \\frac 1 2 \\int r(x) p_\\text{nu}(x) dx - \\int r(x) p_\\text{de} dx + \\frac 1 2, \\end{aligned}  can interpreted expected squared difference density ratio unity, denominator distribution. two distributions (almost) equal, squared deviation small, thus Pearson divergence small. large differences two distributions, squared deviation large, thus Pearson divergence large. Since know numerator denominator densities, density ratio, estimate Pearson divergence samples. density ratio can estimated using spectral() method (see Get Started vignette Izbicki et al., 2014). Subsequently, can estimate Pearson divergence empirically, averaging density ratios numerator denominator samples. , estimate Pearson divergence PÊ(pnu,pde)=12nnu∑=1nnur̂(xi(nu))−1nde∑j=1nder̂(xj(de))+12, \\hat{PE}(p_\\text{nu}, p_\\text{de}) = \\frac{1}{2n_\\text{nu}} \\sum_{= 1}^{n_\\text{nu}} \\hat{r}(x_i^{(\\text{nu})}) - \\frac{1}{n_\\text{de}} \\sum_{j = 1}^{n_\\text{de}} \\hat{r}(x_j^{(\\text{de})}) + \\frac{1}{2},  r̂(x)\\hat{r}(x) denotes estimated density ratio location xx, nnun_\\text{nu} nden_\\text{de} number samples numerator denominator distributions, respectively. Finally, can compare estimated Pearson divergence reference distribution. However, best knowledge, known reference distribution Pearson divergence, since non-negative quantity, normal approximation might feasible. Therefore, use permutation test obtain null distribution, proposed Sugiyama et al. (2011). , randomly re-allocate samples numerator denominator distributions, estimate density ratio function, compute Pearson divergence repeatedly, obtain reference distribution Pearson divergences null hypothesis. Subsequently, evaluate probability obtained Pearson divergence larger Pearson divergences null distribution, gives rise pp-value. approach achieves nominal type error control rates, shown Volker (2025).","code":""},{"path":"https://thomvolker.github.io/densityratio/articles/high-dim-testing.html","id":"empirical-example","dir":"Articles","previous_headings":"","what":"Empirical example","title":"High dimensional two-sample testing","text":"illustrate divergence-based test, use colon dataset (included densityratio package), contains expression levels 2000 genes 22 colon tumor tissues, 40 non-tumor tissues (Alon et al., 1999). goal evaluate whether expression levels genes different two groups (genes simultaneously). summary() function computes Pearson divergence, performs permutation test evaluate null hypothesis two distributions equal. case, probability samples come distribution small, thus gene expression levels different two groups. Evaluating genes important difference straightforward high-dimensional data, require alternative methods (perhaps dimension reduction conducting density ratio estimation, lasso-type analysis).","code":"library(densityratio)  numerator <- subset(colon, class == \"tumor\", select = -class) denominator <- subset(colon, class == \"normal\", select = -class)  dr <- spectral(numerator, denominator)  summary(dr, test = TRUE, parallel = TRUE) #>  #> Call: #> spectral(df_numerator = numerator, df_denominator = denominator) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 40 #>  #> Optimal sigma: 110.8282 #> Optimal subspace: 35 #> Optimal kernel weights (cv): num [1:35] 1.05247 0.56802 0.00296 0.15847 -0.24053 ... #>   #> Pearson divergence between P(nu) and P(de): 1.972 #> Pr(P(nu)=P(de)) < .001 #> Bonferroni-corrected for testing with r(x) = P(nu)/P(de) AND r*(x) = P(de)/P(nu)."},{"path":"https://thomvolker.github.io/densityratio/articles/high-dim-testing.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"High dimensional two-sample testing","text":"Alon, U., Barkai, N., Notterman, D. ., Gish, K., Ybarra, S., Mack, D., & Levine, . J. (1999). Broad patterns gene expression revealed clustering tumor normal colon tissues probed oligonucleotide arrays. Proceedings National Academy Sciences, 96(12), 6745-6750. https://doi.org/10.1073/pnas.96.12.6745 Izbicki, R., Lee, ., & Schafer, C. (2014). High-dimensional density ratio estimation extensions approximate likelihood computation. Proceedings Machine Learning Research, 33, 420-429. https://proceedings.mlr.press/v33/izbicki14.html Sugiyama, M., Suzuki, T., Itoh, Y., Kanamori, T., & Kimura, M. (2011). Least-squares two-sample test. Neural Networks, 24, 735-751. http://dx.doi.org/10.1016/j.neunet.2011.04.003 Volker, T. B. (2025). Divergence-based testing using density ratio estimation techniques. https://gist.github.com/thomvolker/58197e535ec458752bccbb5b611046ce Volker, T. B., de Wolf, P.-P., & Van Kesteren, E.-J. (2023). Assessing utility synthetic data: density ratio perspective. UNECE Expert Meeting Statistical Data Confidentiality. https://doi.org/10.5281/zenodo.8315054","code":""},{"path":"https://thomvolker.github.io/densityratio/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thom Volker. Author, maintainer. Carlos Gonzalez Poses. Contributor. Erik-Jan van Kesteren. Contributor.","code":""},{"path":"https://thomvolker.github.io/densityratio/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Volker T, Gonzalez Poses C, van Kesteren E (2024). “densityratio: Distribution comparison density ratio estimation.” doi:10.5281/zenodo.13881689, https://github.com/thomvolker/densityratio.","code":"@Misc{,   author = {Thom Benjamin Volker and Carlos {Gonzalez Poses} and Erik-Jan {van Kesteren}},   title = {densityratio: Distribution comparison through density ratio estimation},   version = {0.0.1},   year = {2024},   url = {https://github.com/thomvolker/densityratio},   doi = {10.5281/zenodo.13881689}, }"},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Distribution Comparison Through Density Ratio Estimation","text":"package provides functionality directly estimate density ratio r(x)=pnu(x)pde(x),r(x) = \\frac{p_\\text{nu}(x)}{p_{\\text{de}}(x)}, without estimating numerator denominator density separately. Density ratio estimation serves many purposes, example, prediction, outlier detection, change-point detection time-series, importance weighting domain adaptation (.e., sample selection bias) evaluation synthetic data utility. key idea differences data distributions can captured density ratio, estimated entire multivariate space data. Subsequently, density ratio values can used summarize dissimilarity two distributions discrepancy measure.","code":""},{"path":"https://thomvolker.github.io/densityratio/index.html","id":"features","dir":"","previous_headings":"Overview","what":"Features","title":"Distribution Comparison Through Density Ratio Estimation","text":"Fast: Computationally intensive code executed C++ using Rcpp RcppArmadillo. Automatic: Good default hyperparameters can optimized cross-validation (recommend understanding parameters using densityratio practice). Complete: Several density ratio estimation methods, unconstrained least-squares importance fitting (ulsif()), Kullback-Leibler importance estimation procedure (kliep()), kernel mean matching (kmm()), ratio estimated densities (naive()), spectral density ratio estimation (spectral() least-squares heterodistributional subspace search (lhss()). User-friendly: Simple user interface, default predict(), print() summary() functions density ratio estimation methods; built-data sets quick testing.","code":""},{"path":"https://thomvolker.github.io/densityratio/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Distribution Comparison Through Density Ratio Estimation","text":"can install stable release densityratio CRAN : development version, use:","code":"install.packages('densityratio') remotes::install_github(\"thomvolker/densityratio\")"},{"path":"https://thomvolker.github.io/densityratio/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Distribution Comparison Through Density Ratio Estimation","text":"package contains several functions estimate density ratio numerator data denominator data. illustrate functionality, make use -built simulated data sets numerator_data denominator_data, consist five variables.","code":""},{"path":"https://thomvolker.github.io/densityratio/index.html","id":"minimal-example","dir":"","previous_headings":"Usage","what":"Minimal example","title":"Distribution Comparison Through Density Ratio Estimation","text":"can ask summary() estimated density ratio object, contains optimal kernel weights (optimized using cross-validation) measure discrepancy numerator denominator densities. formally evaluate whether numerator denominator densities differ significantly, can perform two-sample homogeneity test follows. probability numerator denominator samples share common data generating mechanism small. ulsif-object also contains (hyper-)parameters used estimating density ratio, centers used constructing Gaussian kernels (fit$centers), different bandwidth parameters (fit$sigma) regularization parameters (fit$lambda). Using variables, can obtain estimated density ratio using predict().","code":"library(densityratio)  head(numerator_data) #> # A tibble: 6 × 5 #>   x1    x2         x3     x4     x5 #>   <fct> <fct>   <dbl>  <dbl>  <dbl> #> 1 A     G1    -0.0299  0.967 -1.26  #> 2 C     G1     2.29   -0.475  2.40  #> 3 A     G1     1.37    0.577 -0.172 #> 4 B     G2     1.44   -0.193 -0.708 #> 5 A     G1     1.01    2.23   2.01  #> 6 C     G2     1.83    0.762  3.71  fit <- ulsif(   df_numerator = numerator_data$x5,   df_denominator = denominator_data$x5,   nsigma = 5,   nlambda = 5 )  class(fit) #> [1] \"ulsif\" summary(fit) #>  #> Call: #> ulsif(df_numerator = numerator_data$x5, df_denominator = denominator_data$x5,     nsigma = 5, nlambda = 5) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 200 #>  #> Optimal sigma: 0.3726142 #> Optimal lambda: 0.03162278 #> Optimal kernel weights: num [1:201] 0.43926 0.01016 0.00407 0.01563 0.01503 ... #>   #> Pearson divergence between P(nu) and P(de): 0.2801 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. summary(fit, test = TRUE) #>  #> Call: #> ulsif(df_numerator = numerator_data$x5, df_denominator = denominator_data$x5,     nsigma = 5, nlambda = 5) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 200 #>  #> Optimal sigma: 0.3726142 #> Optimal lambda: 0.03162278 #> Optimal kernel weights: num [1:201] 0.43926 0.01016 0.00407 0.01563 0.01503 ... #>   #> Pearson divergence between P(nu) and P(de): 0.2801 #> Pr(P(nu)=P(de)) < .001 #> Bonferroni-corrected for testing with r(x) = P(nu)/P(de) AND r*(x) = P(de)/P(nu). # obtain predictions for the numerator samples  newx5 <- seq(from = -3, to = 6, by = 0.05) pred <- predict(fit, newdata = newx5)  ggplot() +   geom_point(aes(x = newx5, y = pred, col = \"ulsif estimates\")) +   stat_function(     mapping = aes(col = \"True density ratio\"),     fun = dratio,     args = list(p = 0.4, dif = 3, mu = 3, sd = 2),     linewidth = 1   ) +   theme_classic() +   scale_color_manual(name = NULL, values = c(\"#de0277\", \"purple\")) +   theme(     legend.position = \"inside\",     legend.position.inside = c(0.8, 0.9),     text = element_text(size = 50),     legend.text = element_text(size = 50),   )"},{"path":"https://thomvolker.github.io/densityratio/index.html","id":"scaling","dir":"","previous_headings":"Usage","what":"Scaling","title":"Distribution Comparison Through Density Ratio Estimation","text":"default, functions densityratio package standardize data numerator means standard deviations. done ensure importance variable kernel estimates dependent scale data. setting scale = \"denominator\" one can scale data means standard deviations denominator data, setting scale = FALSE data remains original scale.","code":""},{"path":"https://thomvolker.github.io/densityratio/index.html","id":"categorical-data","dir":"","previous_headings":"Usage","what":"Categorical data","title":"Distribution Comparison Through Density Ratio Estimation","text":"functions densityratio package accept categorical variables types. However, note internally, variables one-hot encoded, can lead high-dimensional feature-space. transformation can give reasonable estimate ratio proportions different data sets (although regularization applied estimated odds closer one seen real data).","code":"summary(numerator_data$x1) #>   A   B   C  #> 351 339 310 summary(denominator_data$x1) #>   A   B   C  #> 252 232 516  fit_cat <- ulsif(   df_numerator = numerator_data$x1,   df_denominator = denominator_data$x1 ) #> Warning in check.sigma(nsigma, sigma_quantile, sigma, dist_nu): There are duplicate values in 'sigma', only the unique values are used.  aggregate(   predict(fit_cat) ~ numerator_data$x1,   FUN = unique ) #>   numerator_data$x1 predict(fit_cat) #> 1                 A        1.3005360 #> 2                 B        1.3574809 #> 3                 C        0.6379142  table(numerator_data$x1) / table(denominator_data$x1) #>  #>         A         B         C  #> 1.3928571 1.4612069 0.6007752"},{"path":"https://thomvolker.github.io/densityratio/index.html","id":"full-data-example","dir":"","previous_headings":"Usage","what":"Full data example","title":"Distribution Comparison Through Density Ratio Estimation","text":"transforming variables numeric variables, possible calculate density ratio entire multivariate space data.","code":"fit_all <- ulsif(   df_numerator = numerator_data,   df_denominator = denominator_data )  summary(fit_all, test = TRUE, parallel = TRUE) #>  #> Call: #> ulsif(df_numerator = numerator_data, df_denominator = denominator_data) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 200 #>  #> Optimal sigma: 1.065369 #> Optimal lambda: 0.1623777 #> Optimal kernel weights: num [1:201] 0.5691 0.1511 0.0959 0.0118 0.0149 ... #>   #> Pearson divergence between P(nu) and P(de): 0.4629 #> Pr(P(nu)=P(de)) < .001 #> Bonferroni-corrected for testing with r(x) = P(nu)/P(de) AND r*(x) = P(de)/P(nu)."},{"path":"https://thomvolker.github.io/densityratio/index.html","id":"other-density-ratio-estimation-functions","dir":"","previous_headings":"Usage","what":"Other density ratio estimation functions","title":"Distribution Comparison Through Density Ratio Estimation","text":"Besides ulsif(), package contains several functions estimate density ratio. naive() estimates numerator denominator densities separately, subsequently takes ratio. kliep() estimates density ratio directly Kullback-Leibler importance estimation procedure. kmm() estimates density ratio kernel mean matching. lhss() estimates density ratio subspace two distributions different using least-squares heterodistributional subspace search. spectral() estimates density ratio using spectral series approach. display kliep() naive() examples . functions discussed Get Started vignette.  figure directly shows ulsif() kliep() come rather close true density ratio function example, outperform naive() solution.","code":"fit_naive <- naive(   df_numerator = numerator_data$x5,   df_denominator = denominator_data$x5 )  fit_kliep <- kliep(   df_numerator = numerator_data$x5,   df_denominator = denominator_data$x5 )   pred_naive <- predict(fit_naive, newdata = newx5) pred_kliep <- predict(fit_kliep, newdata = newx5)   ggplot(data = NULL, aes(x = newx5)) +   geom_point(aes(y = pred, col = \"ulsif estimates\")) +   geom_point(aes(y = pred_naive, col = \"naive estimates\")) +   geom_point(aes(y = pred_kliep, col = \"kliep estimates\")) +   stat_function(aes(x = NULL, col = \"True density ratio\"),     fun = dratio, args = list(p = 0.4, dif = 3, mu = 3, sd = 2),     linewidth = 1   ) +   theme_classic() +   scale_color_manual(name = NULL, values = c(\"pink\", \"#512970\", \"#de0277\", \"purple\")) +   theme(     legend.position = \"inside\",     legend.position.inside = c(0.8, 0.9),     text = element_text(size = 50),     legend.text = element_text(size = 50),   )"},{"path":"https://thomvolker.github.io/densityratio/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Distribution Comparison Through Density Ratio Estimation","text":"package still development, ’ll happy take feedback suggestions. Please submit GitHub Issues.","code":""},{"path":"https://thomvolker.github.io/densityratio/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Distribution Comparison Through Density Ratio Estimation","text":"Books General information density ratio estimation framework: Sugiyama, Suzuki Kanamori (2012). Density Ratio Estimation Machine Learning Papers Density ratio estimation evaluation utility synthetic data: Volker, De Wolf Van Kesteren (2023). Assessing utility synthetic data: density ratio perspective Density ratio estimation covariate shift: Huang, Smola, Gretton, Borgwardt Schölkopf (2007). Correcting sample selection bias unlabeled data High-dimensional density ratio estimation spectral series approach: Izbicki, Lee Schafer (2014). High-dimensional density ratio estimation extensions approximate likelihood computation Least-squares density ratio estimation: Sugiyama, Hido Kanamori (2009). least-squares approach direct importance estimation","code":""},{"path":"https://thomvolker.github.io/densityratio/index.html","id":"how-to-cite","dir":"","previous_headings":"","what":"How to cite","title":"Distribution Comparison Through Density Ratio Estimation","text":"Volker, T.B., Poses, C. & Van Kesteren, E.J. (2023). densityratio: Distribution comparison density ratio estimation. https://doi.org/10.5281/zenodo.8307818","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/colon.html","id":null,"dir":"Reference","previous_headings":"","what":"colon — colon","title":"colon — colon","text":"Colon cancer data set princeton, containing 2000 gene expressions 22 colon tumor tissues 40 non-tumor tissues. data collected Alon et al. (1999) can obtained .","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/colon.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"colon — colon","text":"data.frame 62 rows 2001 columns (class variable 2000 gene expressions).","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/create_bivariate_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bivariate plot — create_bivariate_plot","title":"Bivariate plot — create_bivariate_plot","text":"Bivariate plot","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/create_bivariate_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bivariate plot — create_bivariate_plot","text":"","code":"create_bivariate_plot(data, ext, vars, logscale, show.sample)"},{"path":"https://thomvolker.github.io/densityratio/reference/create_bivariate_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bivariate plot — create_bivariate_plot","text":"data Data frame individual values density ratio estimates ext Data frame density ratio estimates sample indicator vars Character vector variable names plotted. logscale Logical indicating whether density ratio plotted log scale. Defaults TRUE. show.sample Logical indicating whether give different shapes observations, depending sample come (numerator denominator). Defaults FALSE.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/create_bivariate_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bivariate plot — create_bivariate_plot","text":"Bivariate plot","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/create_univariate_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate plot — create_univariate_plot","title":"Univariate plot — create_univariate_plot","text":"Scatterplot individual values density ratio estimates. Used internally create_univariate_plot()","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/create_univariate_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Univariate plot — create_univariate_plot","text":"","code":"create_univariate_plot(data, ext, var, y_lab, sample.facet = TRUE)"},{"path":"https://thomvolker.github.io/densityratio/reference/create_univariate_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Univariate plot — create_univariate_plot","text":"data Data frame individual values density ratio estimates ext Data frame density ratio estimates sample indicator var Name variable plotted x-axis y_lab Name y-axis label, typically (\"Density Ratio\" \"Log Density Ratio\") sample.facet Logical indicating whether facet plot sample. Default TRUE.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/create_univariate_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Univariate plot — create_univariate_plot","text":"scatterplot variable values density ratio estimates.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/denominator_data.html","id":null,"dir":"Reference","previous_headings":"","what":"denominator_data — denominator_data","title":"denominator_data — denominator_data","text":"Simulated data set (see data-raw/generate-data-densityratio.R) five variables used examples.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/denominator_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"denominator_data — denominator_data","text":"data frame 1000 rows 5 columns: x1 Categorical variable three categories, '', 'B' 'C' x2 Categorical variable two categories, 'G1' 'G2' x3 Continuous variable (normally distributed given x1 x2) x4 Continuous variable (normally distributed) x5 Continuous variable (normally distributed)","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/denominator_small.html","id":null,"dir":"Reference","previous_headings":"","what":"denominator_small — denominator_small","title":"denominator_small — denominator_small","text":"Subset denominator_data three variables 50 observations","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/denominator_small.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"denominator_small — denominator_small","text":"data frame 100 rows 3 columns: x1 Continuous variable (normally distributed given x1 x2) x2 Continuous variable (normally distributed) x3 Continuous variable (normally distributed)","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Gram matrix with squared Euclidean distances between observations in the input matrix X and the input matrix Y — distance","title":"Create a Gram matrix with squared Euclidean distances between observations in the input matrix X and the input matrix Y — distance","text":"Create Gram matrix squared Euclidean distances observations input matrix X input matrix Y","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Gram matrix with squared Euclidean distances between observations in the input matrix X and the input matrix Y — distance","text":"X numeric input matrix Y numeric input matrix variables X intercept Logical indicating whether intercept added estimation procedure. case, first column -zero column (transformed -ones column kernel).","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/dr.histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"A histogram of density ratio estimates — dr.histogram","title":"A histogram of density ratio estimates — dr.histogram","text":"Creates histogram density ratio estimates. Useful understand distribution estimated density ratios sample, compare among samples. default plotting method density ratio objects.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/dr.histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A histogram of density ratio estimates — dr.histogram","text":"","code":"dr.histogram(   x,   samples = \"both\",   logscale = TRUE,   binwidth = NULL,   bins = NULL,   tol = 0.01,   ... )  # S3 method for class 'ulsif' plot(   x,   samples = \"both\",   logscale = TRUE,   binwidth = NULL,   bins = NULL,   tol = 0.01,   ... )  # S3 method for class 'kliep' plot(   x,   samples = \"both\",   logscale = TRUE,   binwidth = NULL,   bins = NULL,   tol = 0.01,   ... )  # S3 method for class 'kmm' plot(   x,   samples = \"both\",   logscale = TRUE,   binwidth = NULL,   bins = NULL,   tol = 0.01,   ... )  # S3 method for class 'spectral' plot(   x,   samples = \"both\",   logscale = TRUE,   binwidth = NULL,   bins = NULL,   tol = 0.01,   ... )  # S3 method for class 'lhss' plot(   x,   samples = \"both\",   logscale = TRUE,   binwidth = NULL,   bins = NULL,   tol = 0.01,   ... )  # S3 method for class 'naivedensityratio' plot(   x,   samples = \"both\",   logscale = TRUE,   binwidth = NULL,   bins = NULL,   tol = 0.01,   ... )"},{"path":"https://thomvolker.github.io/densityratio/reference/dr.histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A histogram of density ratio estimates — dr.histogram","text":"x Density ratio object created e.g., kliep(), ulsif(), naive() samples Character string indicating whether plot 'numerator', 'denominator', '' samples. Default ''. logscale Logical indicating whether plot density ratio estimates log scale. Default TRUE. binwidth Numeric indicating width bins, passed ggplot2. bins Numeric indicating number bins. Overriden binwidth, passed ggplot2. tol Numeric indicating tolerance: values value set tolerance value, legibility plots ... Additional arguments passed predict().","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/dr.histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A histogram of density ratio estimates — dr.histogram","text":"histogram density ratio estimates. histogram density ratio estimates. histogram density ratio estimates. histogram density ratio estimates. histogram density ratio estimates. histogram density ratio estimates. histogram density ratio estimates.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/extract_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract parameters — extract_params","title":"Extract parameters — extract_params","text":"Extract parameters","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/extract_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract parameters — extract_params","text":"","code":"extract_params(object, ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/extract_params.kliep.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain parameters from a kliep object — extract_params.kliep","title":"Obtain parameters from a kliep object — extract_params.kliep","text":"Obtain parameters kliep object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/extract_params.kliep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain parameters from a kliep object — extract_params.kliep","text":"","code":"# S3 method for class 'kliep' extract_params(object, sigma, ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/extract_params.kmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain parameters from a kmm object — extract_params.kmm","title":"Obtain parameters from a kmm object — extract_params.kmm","text":"Obtain parameters kmm object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/extract_params.kmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain parameters from a kmm object — extract_params.kmm","text":"","code":"# S3 method for class 'kmm' extract_params(object, sigma, ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/extract_params.lhss.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain parameters from a lhss object — extract_params.lhss","title":"Obtain parameters from a lhss object — extract_params.lhss","text":"Obtain parameters lhss object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/extract_params.lhss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain parameters from a lhss object — extract_params.lhss","text":"","code":"# S3 method for class 'lhss' extract_params(object, lambda, lambdasigma, ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/extract_params.spectral.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain parameters from a spectral object — extract_params.spectral","title":"Obtain parameters from a spectral object — extract_params.spectral","text":"Obtain parameters spectral object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/extract_params.spectral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain parameters from a spectral object — extract_params.spectral","text":"","code":"# S3 method for class 'spectral' extract_params(object, sigma, m, ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/extract_params.ulsif.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain parameters from a ulsif object — extract_params.ulsif","title":"Obtain parameters from a ulsif object — extract_params.ulsif","text":"Obtain parameters ulsif object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/extract_params.ulsif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain parameters from a ulsif object — extract_params.ulsif","text":"","code":"# S3 method for class 'ulsif' extract_params(object, sigma, lambda, ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/insurance.html","id":null,"dir":"Reference","previous_headings":"","what":"insurance — insurance","title":"insurance — insurance","text":"Insurance data openly available (e.g., Kaggle).","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/insurance.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"insurance — insurance","text":"data.frame 1338 rows 7 columns: age Age insured (continuous) sex Sex insured (binary) bmi Body mass index insured (continuous) children Number children/dependents covered insurance (integer) smoker Whether insured smoker (binary) region region insured lives (categorical) charges medical costs billed insurance (continuous)","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/kernel_gaussian.html","id":null,"dir":"Reference","previous_headings":"","what":"Create gaussian kernel gram matrix from distance matrix — kernel_gaussian","title":"Create gaussian kernel gram matrix from distance matrix — kernel_gaussian","text":"Create gaussian kernel gram matrix distance matrix","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/kernel_gaussian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create gaussian kernel gram matrix from distance matrix — kernel_gaussian","text":"dist numeric distance matrix sigma scalar length-scale parameter","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/kidiq.html","id":null,"dir":"Reference","previous_headings":"","what":"kidiq — kidiq","title":"kidiq — kidiq","text":"kidiq data stems National Longitudinal Survey Youth used Gelman Hill (2007). data set contains 434 observations measured five variables, obtained https://github.com/jknowles/BDAexampleR.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/kidiq.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"kidiq — kidiq","text":"data.frame 434 rows 5 columns kid_score Child's IQ score (continuous) mom_hs Whether mother obtained high school degree (binary) mom_iq Mother's IQ score (continuous) mom_work Whether mother worked first three years child's life (1: first three years; 2: second third year; 3: parttime first year; 4: fulltime first year) mom_age Mother's age (continuous)","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/kliep.html","id":null,"dir":"Reference","previous_headings":"","what":"Kullback-Leibler importance estimation procedure — kliep","title":"Kullback-Leibler importance estimation procedure — kliep","text":"Kullback-Leibler importance estimation procedure","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/kliep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kullback-Leibler importance estimation procedure — kliep","text":"","code":"kliep(   df_numerator,   df_denominator,   scale = \"numerator\",   nsigma = 10,   sigma_quantile = NULL,   sigma = NULL,   ncenters = 200,   centers = NULL,   cv = TRUE,   nfold = 5,   epsilon = NULL,   maxit = 5000,   progressbar = TRUE )"},{"path":"https://thomvolker.github.io/densityratio/reference/kliep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kullback-Leibler importance estimation procedure — kliep","text":"df_numerator data.frame exclusively numeric variables numerator samples df_denominator data.frame exclusively numeric variables denominator samples (must variables df_denominator) scale \"numerator\", \"denominator\", NULL, indicating whether standardize numeric variable according numerator means standard deviations, denominator means standard deviations, apply standardization . nsigma Integer indicating number sigma values (bandwidth parameter Gaussian kernel gram matrix) use cross-validation. sigma_quantile NULL numeric vector probabilities calculate quantiles distance matrix obtain sigma values. NULL, nsigma values 0.25 0.75 used. sigma NULL scalar value determine bandwidth Gaussian kernel gram matrix. NULL, nsigma values 0.25 0.75 used. ncenters Maximum number Gaussian centers kernel gram matrix. Defaults numerator samples. centers Option specify Gaussian samples manually. cv Logical indicating whether cross-validation nfold Number cross-validation folds used order calculate optimal sigma value (default 5-fold cv). epsilon Numeric scalar vector learning rate gradient-ascent procedure. vector, values used learning rate. default, 10^{1:-5} used. maxit Maximum number iterations optimization scheme. progressbar Logical indicating whether display progressbar.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/kliep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kullback-Leibler importance estimation procedure — kliep","text":"kliep-object, containing information calculate density ratio using optimal sigma optimal weights.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/kliep.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Kullback-Leibler importance estimation procedure — kliep","text":"Sugiyama, M., Suzuki, T., Nakajima, S., Kashima, H., Von Bünau, P., & Kawanabe, M. (2008). Direct importance estimation covariate shift adaptation. Annals Institute Statistical Mathematics 60, 699-746. Doi: https://doi.org/10.1007/s10463-008-0197-x.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/kliep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kullback-Leibler importance estimation procedure — kliep","text":"","code":"set.seed(123) # Fit model dr <- kliep(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> kliep(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num [1:10] 0.711 1.08 1.333 1.538 1.742 ... #>  #> Optimal sigma (5-fold cv): 0.7105 #> Optimal kernel weights (5-fold cv):  num [1:150, 1] 0.476 0.67 0.578 0.678 0.603 ... #>  #> Optimization parameters: #>   Learning rate (epsilon): 1e+01  1e+00  1e-01  1e-02  1e-03  1e-04  1e-05 #>   Maximum number of iterations:  5000 # Obtain summary of model object summary(dr) #>  #> Call: #> kliep(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #> Optimal sigma: 0.7105233 #> Optimal kernel weights: num [1:150, 1] 0.476 0.67 0.578 0.678 0.603 ... #>   #> Kullback-Leibler divergence between P(nu) and P(de): 0.8268 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 16 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 16 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 16 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #>          [,1] #> [1,] 1.432706 #> [2,] 2.696996 #> [3,] 3.600185 #> [4,] 2.715088 #> [5,] 2.219022 #> [6,] 2.930002 # Fit model with custom parameters kliep(numerator_small, denominator_small,       nsigma = 1, ncenters = 100, nfold = 10,       epsilon = 10^{2:-5}, maxit = 500) #>  #> Call: #> kliep(df_numerator = numerator_small, df_denominator = denominator_small,     nsigma = 1, ncenters = 100, nfold = 10, epsilon = 10^{        2:-5    }, maxit = 500) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num 1.85 #>  #> Optimal sigma (10-fold cv): 1.852 #> Optimal kernel weights (10-fold cv):  num [1:100, 1] 0.039 0 0.0659 0 0.0786 ... #>  #> Optimization parameters: #>   Learning rate (epsilon): 1e+02  1e+01  1e+00  1e-01  1e-02  1e-03  1e-04  1e-05 #>   Maximum number of iterations:  500"},{"path":"https://thomvolker.github.io/densityratio/reference/kmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel mean matching approach to density ratio estimation — kmm","title":"Kernel mean matching approach to density ratio estimation — kmm","text":"Kernel mean matching approach density ratio estimation","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/kmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel mean matching approach to density ratio estimation — kmm","text":"","code":"kmm(   df_numerator,   df_denominator,   scale = \"numerator\",   constrained = FALSE,   nsigma = 10,   sigma_quantile = NULL,   sigma = NULL,   ncenters = 200,   centers = NULL,   cv = TRUE,   nfold = 5,   parallel = FALSE,   nthreads = NULL,   progressbar = TRUE,   osqp_settings = NULL,   cluster = NULL )"},{"path":"https://thomvolker.github.io/densityratio/reference/kmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel mean matching approach to density ratio estimation — kmm","text":"df_numerator data.frame exclusively numeric variables numerator samples df_denominator data.frame exclusively numeric variables denominator samples (must variables df_denominator) scale \"numerator\", \"denominator\", NULL, indicating whether standardize numeric variable according numerator means standard deviations, denominator means standard deviations, apply standardization . constrained logical equals FALSE use unconstrained optimization, TRUE use constrained optimization. Defaults FALSE. nsigma Integer indicating number sigma values (bandwidth parameter Gaussian kernel gram matrix) use cross-validation. sigma_quantile NULL numeric vector probabilities calculate quantiles distance matrix obtain sigma values. NULL, nsigma values 0.25 0.75 used. sigma NULL scalar value determine bandwidth Gaussian kernel gram matrix. NULL, nsigma values 0.25 0.75 used. ncenters Maximum number Gaussian centers kernel gram matrix. Defaults numerator samples. centers Option specify Gaussian samples manually. cv Logical indicating whether cross-validation nfold Number cross-validation folds used order calculate optimal sigma value (default 5-fold cv). parallel logical indicating whether use parallel processing cross-validation scheme. nthreads NULL integer indicating number threads use parallel processing. parallel processing enabled, defaults number available threads minus one. progressbar Logical indicating whether display progressbar. osqp_settings Optional: settings pass osqp solver constrained optimization. cluster Optional: cluster object use parallel processing, see parallel::makeCluster.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/kmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kernel mean matching approach to density ratio estimation — kmm","text":"kmm-object, containing information calculate density ratio using optimal sigma optimal weights.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/kmm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Kernel mean matching approach to density ratio estimation — kmm","text":"Huang, J., Smola, . J., Gretton, ., Borgwardt, K. M., & Schölkopf, B. (2006). Correcting sample selection bias unlabeled data. Advances Neural Information Processing Systems, edited B. Schölkopf, J. Platt T. Hoffman. Available https://proceedings.neurips.cc/paper/2006/hash/a2186aa7c086b46ad4e8bf81e2a3a19b-Abstract.html.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/kmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernel mean matching approach to density ratio estimation — kmm","text":"","code":"set.seed(123) # Fit model dr <- kmm(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> kmm(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num [1:10] 0.801 1.2 1.483 1.723 1.954 ... #>  #> Optimal sigma (5-fold cv): 3.67 #> Optimal kernel weights (5-fold cv):  num [1:150, 1] 0.23 0.416 -0.166 1.512 0.831 ... #>  #> Optimization parameters: #>   Optimization method:  Unconstrained  #>  # Obtain summary of model object summary(dr) #>  #> Call: #> kmm(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #> Optimal sigma: 3.669758 #> Optimal kernel weights: num [1:150, 1] 0.23 0.416 -0.166 1.512 0.831 ... #>   #> Pearson divergence between P(nu) and P(de): 0.9439 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 19 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 19 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 19 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #>           [,1] #> [1,] 3.1261579 #> [2,] 4.0233887 #> [3,] 3.6868339 #> [4,] 5.5934888 #> [5,] 0.6302996 #> [6,] 1.5225886 # Fit model with custom parameters kmm(numerator_small, denominator_small,     nsigma = 5, ncenters = 100, nfold = 10,     constrained = TRUE) #>  #> Call: #> kmm(df_numerator = numerator_small, df_denominator = denominator_small,     constrained = TRUE, nsigma = 5, ncenters = 100, nfold = 10) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num [1:5] 0.811 1.577 2.094 2.66 3.706 #>  #> Optimal sigma (10-fold cv): 2.094 #> Optimal kernel weights (10-fold cv):  num [1:100, 1] -0.000498 -0.000999 -0.001187 -0.001022 -0.000275 ... #>  #> Optimization parameters: #>   Optimization method:  Constrained  #>"},{"path":"https://thomvolker.github.io/densityratio/reference/lhss.html","id":null,"dir":"Reference","previous_headings":"","what":"Least-squares heterodistributional subspace search — lhss","title":"Least-squares heterodistributional subspace search — lhss","text":"Least-squares heterodistributional subspace search","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/lhss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Least-squares heterodistributional subspace search — lhss","text":"","code":"lhss(   df_numerator,   df_denominator,   m = NULL,   intercept = TRUE,   scale = \"numerator\",   nsigma = 10,   sigma_quantile = NULL,   sigma = NULL,   nlambda = 10,   lambda = NULL,   ncenters = 200,   centers = NULL,   maxit = 200,   progressbar = TRUE )"},{"path":"https://thomvolker.github.io/densityratio/reference/lhss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Least-squares heterodistributional subspace search — lhss","text":"df_numerator data.frame exclusively numeric variables numerator samples df_denominator data.frame exclusively numeric variables denominator samples (must variables df_denominator) m Scalar indicating dimensionality reduced subspace intercept logical Indicating whether include intercept term model. Defaults TRUE. scale \"numerator\", \"denominator\", NULL, indicating whether standardize numeric variable according numerator means standard deviations, denominator means standard deviations, apply standardization . nsigma Integer indicating number sigma values (bandwidth parameter Gaussian kernel gram matrix) use cross-validation. sigma_quantile NULL numeric vector probabilities calculate quantiles distance matrix obtain sigma values. NULL, nsigma values 0.05 0.95 used. sigma NULL scalar value determine bandwidth Gaussian kernel gram matrix. NULL, nsigma values 0.05 0.95 used. nlambda Integer indicating number lambda values (regularization parameter), default, lambda set 10^seq(3, -3, length.= nlambda). lambda NULL numeric vector indicating lambda values use cross-validation ncenters Maximum number Gaussian centers kernel gram matrix. Defaults numerator samples. centers Numeric matrix variables nu de used Gaussian centers kernel Gram matrix. default, matrix nu used matrix Gaussian centers. maxit Maximum number iterations updating scheme. progressbar Logical indicating whether display progressbar.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/lhss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Least-squares heterodistributional subspace search — lhss","text":"lhss-object, containing information calculate density ratio using optimal sigma, optimal lambda optimal weights.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/lhss.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Least-squares heterodistributional subspace search — lhss","text":"Sugiyama, M., Yamada, M., Von Bünau, P., Suzuki, T., Kanamori, T. & Kawanabe, M. (2011). Direct density-ratio estimation dimensionality reduction via least-squares hetero-distributional subspace search.  Neural Networks, 24, 183-198. doi:10.1016/j.neunet.2010.10.005 .","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/lhss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Least-squares heterodistributional subspace search — lhss","text":"","code":"set.seed(123) # Fit model dr <- naive(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Naive density ratio #>   Number of variables: 3 #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Numerator density: num [1:50] 1.41 5.74 1.87 4.13 1.67 ... #>   Denominator density: num [1:100] 2.93 0.071 1.065 1.59 2.115 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Naive density ratio estimate: #>   Number of variables:  #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Density ratio for numerator samples: num [1:50] 0.344 1.747 0.628 1.419 0.511 ... #>   Density ratio for denominator samples: num [1:100] 1.0751 -2.6454 0.0626 0.464 0.7493 ... #>   #>  #> Squared average log density ratio difference for numerator and denominator samples (SALDRD): 13.56 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> [1] 1.410607 5.739287 1.874031 4.131255 1.666760 4.095855 # Fit model with custom parameters naive(numerator_small, denominator_small, m=2, kernel=\"epanechnikov\") #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small,     m = 2, kernel = \"epanechnikov\") #>  #> Naive density ratio #>   Number of variables: 3 #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Numerator density: num [1:50] 0.572 1.421 0.945 1.058 0.936 ... #>   Denominator density: num [1:100] 1.391 1.459 0.572 0.943 1.314 ... #>"},{"path":"https://thomvolker.github.io/densityratio/reference/naive.html","id":null,"dir":"Reference","previous_headings":"","what":"Naive density ratio estimation — naive","title":"Naive density ratio estimation — naive","text":"naive approach creates separate kernel density estimates numerator denominator samples, evaluates ratio denominator samples. multivariate data, density ratio computed orthogonal linear transformation, new variables can treated independent. reduce dimensionality PCA solution, one can set number components setting m parameter integer value smaller number variables.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/naive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Naive density ratio estimation — naive","text":"","code":"naive(   df_numerator,   df_denominator,   m = NULL,   bw = \"SJ\",   kernel = \"gaussian\",   n = 2L^11,   ... )"},{"path":"https://thomvolker.github.io/densityratio/reference/naive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Naive density ratio estimation — naive","text":"df_numerator data.frame exclusively numeric variables numerator samples df_denominator data.frame exclusively numeric variables denominator samples (must variables df_denominator) m integer Optional parameter reduce dimensionality data multivariate density ratio estimation problems. missing, number variables data used. set integer value smaller number variables, first m principal components used estimate density ratio. set NULL, square root number variables used (consistency methods). bw smoothing bandwidth used. See stats::density information. kernel kernel used. See stats::density information. n integer number equally spaced points density estimated. n > 512, rounded power 2 calculations (fast Fourier transform used) final result interpolated stats::approx. makes sense specify n power' two. ... arguments passed stats::density","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/naive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Naive density ratio estimation — naive","text":"naivedensityratio object","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/naive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Naive density ratio estimation — naive","text":"","code":"set.seed(123) # Fit model dr <- naive(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Naive density ratio #>   Number of variables: 3 #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Numerator density: num [1:50] 1.41 5.74 1.87 4.13 1.67 ... #>   Denominator density: num [1:100] 2.93 0.071 1.065 1.59 2.115 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Naive density ratio estimate: #>   Number of variables:  #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Density ratio for numerator samples: num [1:50] 0.344 1.747 0.628 1.419 0.511 ... #>   Density ratio for denominator samples: num [1:100] 1.0751 -2.6454 0.0626 0.464 0.7493 ... #>   #>  #> Squared average log density ratio difference for numerator and denominator samples (SALDRD): 13.56 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> [1] 1.410607 5.739287 1.874031 4.131255 1.666760 4.095855 # Fit model with custom parameters naive(numerator_small, denominator_small, m=2, kernel=\"epanechnikov\") #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small,     m = 2, kernel = \"epanechnikov\") #>  #> Naive density ratio #>   Number of variables: 3 #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Numerator density: num [1:50] 0.572 1.421 0.945 1.058 0.936 ... #>   Denominator density: num [1:100] 1.391 1.459 0.572 0.943 1.314 ... #>"},{"path":"https://thomvolker.github.io/densityratio/reference/numerator_data.html","id":null,"dir":"Reference","previous_headings":"","what":"numerator_data — numerator_data","title":"numerator_data — numerator_data","text":"Simulated data set (see data-raw/generate-data-densityratio.R) five variables used examples.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/numerator_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"numerator_data — numerator_data","text":"data frame 1000 rows 5 columns: x1 Categorical variable three categories, '', 'B' 'C' x2 Categorical variable two categories, 'G1' 'G2' x3 Continuous variable (normally distributed given x1 x2) x4 Continuous variable (normally distributed given x3) x5 Continuous variable (mixture two normally distributed variables)","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/numerator_small.html","id":null,"dir":"Reference","previous_headings":"","what":"numerator_small — numerator_small","title":"numerator_small — numerator_small","text":"Subset numerator_data three variables 50 observations","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/numerator_small.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"numerator_small — numerator_small","text":"data frame 50 rows 3 columns: x1 Continuous variable (normally distributed given x1 x2) x2 Continuous variable (normally distributed given x3) x3 Continuous variable (mixture two normally distributed variables)","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/permute.html","id":null,"dir":"Reference","previous_headings":"","what":"Single permutation — permute","title":"Single permutation — permute","text":"Single permutation Single permutation statistic ulsif object Single permutation statistic kliep object Single permutation statistic kmm object Single permutation statistic lhss object Single permutation statistic spectral object Single permutation statistic naivedensityratio object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/permute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single permutation — permute","text":"","code":"permute(object, ...)  # S3 method for class 'ulsif' permute(object, stacked, nnu, nde, ...)  # S3 method for class 'kliep' permute(object, stacked, nnu, nde, min_pred = sqrt(.Machine$double.eps), ...)  # S3 method for class 'kmm' permute(object, stacked, nnu, nde, ...)  # S3 method for class 'lhss' permute(object, stacked, nnu, nde, ...)  # S3 method for class 'spectral' permute(object, stacked, nnu, nde, ...)  # S3 method for class 'naivedensityratio' permute(object, stacked, nnu, nde, min_pred, max_pred, ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/permute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single permutation — permute","text":"object naivedensityratio object ... Additional arguments pass specific permute functions. stacked matrix stacked numerator denominator samples nnu Scalar numerator sample size nde Scalar denominator sample size min_pred Minimum value predicted density ratio max_pred Maximum value predicted density ratio","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/permute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single permutation — permute","text":"permutation statistic single permutation data permutation statistic single permutation data permutation statistic single permutation data permutation statistic single permutation data permutation statistic single permutation data permutation statistic single permutation data permutation statistic single permutation data","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/plot_bivariate.html","id":null,"dir":"Reference","previous_headings":"","what":"Densityratio in two-dimensional plot — plot_bivariate","title":"Densityratio in two-dimensional plot — plot_bivariate","text":"Plots scatterplot two variables, densityratio mapped colour scale.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/plot_bivariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Densityratio in two-dimensional plot — plot_bivariate","text":"","code":"plot_bivariate(   x,   vars = NULL,   samples = \"both\",   grid = FALSE,   logscale = TRUE,   show.sample = FALSE,   tol = 0.01,   ... )"},{"path":"https://thomvolker.github.io/densityratio/reference/plot_bivariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Densityratio in two-dimensional plot — plot_bivariate","text":"x Density ratio object created e.g., kliep(), ulsif(), naive() vars Character vector variable names pairwise bivariate plots created samples Character string indicating whether plot 'numerator', 'denominator', '' samples. Default ''. grid Logical indicating whether output list individual plots (\"individual\"), one facetted plot variables (\"assembled\"). Defaults \"individual\". logscale Logical indicating whether plot density ratio estimates log scale. Default TRUE. show.sample Logical indicating whether give different shapes observations, depending sample come (numerator denominator). Defaults FALSE. tol Numeric indicating tolerance: values value set tolerance value, legibility plots ... Additional arguments passed predict() function.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/plot_bivariate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Densityratio in two-dimensional plot — plot_bivariate","text":"Bivariate scatter plots combinations variables vars.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/plot_bivariate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Densityratio in two-dimensional plot — plot_bivariate","text":"","code":"set.seed(123) # Fit model dr <- ulsif(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num [1:10] 0.711 1.08 1.333 1.538 1.742 ... #>  #> Regularization parameter (lambda): num [1:20] 1000 483.3 233.6 112.9 54.6 ... #>  #> Optimal sigma (loocv): 1.538158 #> Optimal lambda (loocv): 2.976351 #> Optimal kernel weights (loocv): num [1:151] 0.0666 0.0289 0.0423 0.0442 0.0454 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>  #> Optimal sigma: 1.538158 #> Optimal lambda: 2.976351 #> Optimal kernel weights: num [1:151] 0.0666 0.0289 0.0423 0.0442 0.0454 ... #>   #> Pearson divergence between P(nu) and P(de): 0.3868 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> , , 1 #>  #>           [,1] #> [1,] 0.9838195 #> [2,] 1.2872509 #> [3,] 1.5069634 #> [4,] 1.2804095 #> [5,] 1.0953012 #> [6,] 1.5262485 #>  # Fit model with custom parameters ulsif(numerator_small, denominator_small, sigma = 2, lambda = 2) #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small,     sigma = 2, lambda = 2) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num 2 #>  #> Regularization parameter (lambda): num 2 #>  #> Optimal sigma (loocv): 2 #> Optimal lambda (loocv): 2 #> Optimal kernel weights (loocv): num [1:151] 0.0378 0.0348 0.0554 0.053 0.0619 ... #>"},{"path":"https://thomvolker.github.io/densityratio/reference/plot_univariate.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot of density ratios and individual variables — plot_univariate","title":"Scatter plot of density ratios and individual variables — plot_univariate","text":"scatter plot showing relationship estimated density ratios individual variables.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/plot_univariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot of density ratios and individual variables — plot_univariate","text":"","code":"plot_univariate(   x,   vars = NULL,   samples = \"both\",   logscale = TRUE,   grid = FALSE,   sample.facet = FALSE,   nrow.panel = NULL,   tol = 0.01,   ... )"},{"path":"https://thomvolker.github.io/densityratio/reference/plot_univariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot of density ratios and individual variables — plot_univariate","text":"x Density ratio object created e.g., kliep(), ulsif(), naive() vars Character vector variable names plotted. samples Character string indicating whether plot 'numerator', 'denominator', '' samples. Default ''. logscale Logical indicating whether plot density ratio estimates log scale. Default TRUE. grid Logical indicating whether output list individual plots (\"individual\"), one facetted plot variables (\"assembled\"). Defaults \"individual\". sample.facet Logical indicating whether facet plot sample, .e, showing plots separate sample, side side. Defaults FALSE. nrow.panel Integer indicating number rows assembled plot. NULL, number rows automatically calculated. tol Numeric indicating tolerance: values value set tolerance value, legibility plots ... Additional arguments passed predict() function.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/plot_univariate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatter plot of density ratios and individual variables — plot_univariate","text":"Scatter plot density ratios individual variables.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/plot_univariate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatter plot of density ratios and individual variables — plot_univariate","text":"","code":"set.seed(123) # Fit model dr <- ulsif(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num [1:10] 0.711 1.08 1.333 1.538 1.742 ... #>  #> Regularization parameter (lambda): num [1:20] 1000 483.3 233.6 112.9 54.6 ... #>  #> Optimal sigma (loocv): 1.538158 #> Optimal lambda (loocv): 2.976351 #> Optimal kernel weights (loocv): num [1:151] 0.0666 0.0289 0.0423 0.0442 0.0454 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>  #> Optimal sigma: 1.538158 #> Optimal lambda: 2.976351 #> Optimal kernel weights: num [1:151] 0.0666 0.0289 0.0423 0.0442 0.0454 ... #>   #> Pearson divergence between P(nu) and P(de): 0.3868 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> , , 1 #>  #>           [,1] #> [1,] 0.9838195 #> [2,] 1.2872509 #> [3,] 1.5069634 #> [4,] 1.2804095 #> [5,] 1.0953012 #> [6,] 1.5262485 #>  # Fit model with custom parameters ulsif(numerator_small, denominator_small, sigma = 2, lambda = 2) #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small,     sigma = 2, lambda = 2) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num 2 #>  #> Regularization parameter (lambda): num 2 #>  #> Optimal sigma (loocv): 2 #> Optimal lambda (loocv): 2 #> Optimal kernel weights (loocv): num [1:151] 0.0378 0.0348 0.0554 0.053 0.0619 ... #>"},{"path":"https://thomvolker.github.io/densityratio/reference/predict.kliep.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain predicted density ratio values from a kliep object — predict.kliep","title":"Obtain predicted density ratio values from a kliep object — predict.kliep","text":"Obtain predicted density ratio values kliep object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/predict.kliep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain predicted density ratio values from a kliep object — predict.kliep","text":"","code":"# S3 method for class 'kliep' predict(object, newdata = NULL, sigma = c(\"sigmaopt\", \"all\"), ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/predict.kliep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain predicted density ratio values from a kliep object — predict.kliep","text":"object kliep object newdata Optional matrix new data set compute density sigma scalar Gaussian kernel width ... Additional arguments passed function","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/predict.kliep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain predicted density ratio values from a kliep object — predict.kliep","text":"array predicted density ratio values possibly new data, otherwise numerator samples.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/predict.kliep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain predicted density ratio values from a kliep object — predict.kliep","text":"","code":"set.seed(123) # Fit model dr <- kliep(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> kliep(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num [1:10] 0.711 1.08 1.333 1.538 1.742 ... #>  #> Optimal sigma (5-fold cv): 0.7105 #> Optimal kernel weights (5-fold cv):  num [1:150, 1] 0.476 0.67 0.578 0.678 0.603 ... #>  #> Optimization parameters: #>   Learning rate (epsilon): 1e+01  1e+00  1e-01  1e-02  1e-03  1e-04  1e-05 #>   Maximum number of iterations:  5000 # Obtain summary of model object summary(dr) #>  #> Call: #> kliep(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #> Optimal sigma: 0.7105233 #> Optimal kernel weights: num [1:150, 1] 0.476 0.67 0.578 0.678 0.603 ... #>   #> Kullback-Leibler divergence between P(nu) and P(de): 0.8268 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 16 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 16 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 16 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #>          [,1] #> [1,] 1.432706 #> [2,] 2.696996 #> [3,] 3.600185 #> [4,] 2.715088 #> [5,] 2.219022 #> [6,] 2.930002 # Fit model with custom parameters kliep(numerator_small, denominator_small,       nsigma = 1, ncenters = 100, nfold = 10,       epsilon = 10^{2:-5}, maxit = 500) #>  #> Call: #> kliep(df_numerator = numerator_small, df_denominator = denominator_small,     nsigma = 1, ncenters = 100, nfold = 10, epsilon = 10^{        2:-5    }, maxit = 500) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num 1.85 #>  #> Optimal sigma (10-fold cv): 1.852 #> Optimal kernel weights (10-fold cv):  num [1:100, 1] 0.039 0 0.0659 0 0.0786 ... #>  #> Optimization parameters: #>   Learning rate (epsilon): 1e+02  1e+01  1e+00  1e-01  1e-02  1e-03  1e-04  1e-05 #>   Maximum number of iterations:  500"},{"path":"https://thomvolker.github.io/densityratio/reference/predict.kmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain predicted density ratio values from a kmm object — predict.kmm","title":"Obtain predicted density ratio values from a kmm object — predict.kmm","text":"Obtain predicted density ratio values kmm object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/predict.kmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain predicted density ratio values from a kmm object — predict.kmm","text":"","code":"# S3 method for class 'kmm' predict(object, newdata = NULL, sigma = c(\"sigmaopt\", \"all\"), ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/predict.kmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain predicted density ratio values from a kmm object — predict.kmm","text":"object kmm object newdata Optional matrix new data set compute density sigma scalar Gaussian kernel width ... Additional arguments passed function","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/predict.kmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain predicted density ratio values from a kmm object — predict.kmm","text":"array predicted density ratio values possibly new data, otherwise numerator samples.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/predict.kmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain predicted density ratio values from a kmm object — predict.kmm","text":"","code":"set.seed(123) # Fit model dr <- kmm(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> kmm(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num [1:10] 0.801 1.2 1.483 1.723 1.954 ... #>  #> Optimal sigma (5-fold cv): 3.67 #> Optimal kernel weights (5-fold cv):  num [1:150, 1] 0.23 0.416 -0.166 1.512 0.831 ... #>  #> Optimization parameters: #>   Optimization method:  Unconstrained  #>  # Obtain summary of model object summary(dr) #>  #> Call: #> kmm(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #> Optimal sigma: 3.669758 #> Optimal kernel weights: num [1:150, 1] 0.23 0.416 -0.166 1.512 0.831 ... #>   #> Pearson divergence between P(nu) and P(de): 0.9439 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 19 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 19 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 19 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #>           [,1] #> [1,] 3.1261579 #> [2,] 4.0233887 #> [3,] 3.6868339 #> [4,] 5.5934888 #> [5,] 0.6302996 #> [6,] 1.5225886 # Fit model with custom parameters kmm(numerator_small, denominator_small,     nsigma = 5, ncenters = 100, nfold = 10,     constrained = TRUE) #>  #> Call: #> kmm(df_numerator = numerator_small, df_denominator = denominator_small,     constrained = TRUE, nsigma = 5, ncenters = 100, nfold = 10) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num [1:5] 0.811 1.577 2.094 2.66 3.706 #>  #> Optimal sigma (10-fold cv): 2.094 #> Optimal kernel weights (10-fold cv):  num [1:100, 1] -0.000498 -0.000999 -0.001187 -0.001022 -0.000275 ... #>  #> Optimization parameters: #>   Optimization method:  Constrained  #>"},{"path":"https://thomvolker.github.io/densityratio/reference/predict.lhss.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain predicted density ratio values from a lhss object — predict.lhss","title":"Obtain predicted density ratio values from a lhss object — predict.lhss","text":"Obtain predicted density ratio values lhss object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/predict.lhss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain predicted density ratio values from a lhss object — predict.lhss","text":"","code":"# S3 method for class 'lhss' predict(   object,   newdata = NULL,   sigma = c(\"sigmaopt\", \"all\"),   lambda = c(\"lambdaopt\", \"all\"),   ... )"},{"path":"https://thomvolker.github.io/densityratio/reference/predict.lhss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain predicted density ratio values from a lhss object — predict.lhss","text":"object lhss object newdata Optional matrix new data set compute density sigma scalar Gaussian kernel width lambda scalar regularization parameter ... Additional arguments passed function","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/predict.lhss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain predicted density ratio values from a lhss object — predict.lhss","text":"array predicted density ratio values possibly new data, otherwise numerator samples.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/predict.lhss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain predicted density ratio values from a lhss object — predict.lhss","text":"","code":"set.seed(123) # Fit model (minimal example to limit computation time) dr <- lhss(numerator_small, denominator_small,            nsigma = 5, nlambda = 3, ncenters = 50, maxit = 100) # Inspect model object dr #>  #> Call: #> lhss(df_numerator = numerator_small, df_denominator = denominator_small,     nsigma = 5, nlambda = 3, ncenters = 50, maxit = 100) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 50 #>   sigma: num [1:5, 1:3] 0.00952 0.36681 1.30318 3.4202 10.53644 ... #>  #> Regularization parameter (lambda): num [1:3] 1e+03 1e+00 1e-03 #>  #> Subspace dimension (m): 1 #> Optimal sigma: 0.3841266 #> Optimal lambda: 1 #> Optimal kernel weights (loocv): num [1:51] 0.2707 0.0121 0.097 0.0135 0.0836 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> lhss(df_numerator = numerator_small, df_denominator = denominator_small,     nsigma = 5, nlambda = 3, ncenters = 50, maxit = 100) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 50 #>  #> Subspace dimension (m): 1 #> Optimal sigma: 0.3841266 #> Optimal lambda: 1 #> Optimal kernel weights (loocv): num [1:51] 0.2707 0.0121 0.097 0.0135 0.0836 ... #>   #> Pearson divergence between P(nu) and P(de): 0.2529 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> , , 1 #>  #>           [,1] #> [1,] 0.8873535 #> [2,] 1.0458496 #> [3,] 0.8122089 #> [4,] 0.4962786 #> [5,] 1.3122394 #> [6,] 1.3092069 #>"},{"path":"https://thomvolker.github.io/densityratio/reference/predict.naivedensityratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain predicted density ratio values from a naivedensityratio object — predict.naivedensityratio","title":"Obtain predicted density ratio values from a naivedensityratio object — predict.naivedensityratio","text":"Obtain predicted density ratio values naivedensityratio object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/predict.naivedensityratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain predicted density ratio values from a naivedensityratio object — predict.naivedensityratio","text":"","code":"# S3 method for class 'naivedensityratio' predict(object, newdata = NULL, log = FALSE, tol = 1e-06, ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/predict.naivedensityratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain predicted density ratio values from a naivedensityratio object — predict.naivedensityratio","text":"object naive object newdata Optional matrix new data set compute density log logical indicating whether return log density ratio tol Minimal density value avoid numerical issues ... Additional arguments passed function","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/predict.naivedensityratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain predicted density ratio values from a naivedensityratio object — predict.naivedensityratio","text":"array predicted density ratio values possibly new data, otherwise numerator samples.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/predict.naivedensityratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain predicted density ratio values from a naivedensityratio object — predict.naivedensityratio","text":"","code":"set.seed(123) # Fit model dr <- naive(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Naive density ratio #>   Number of variables: 3 #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Numerator density: num [1:50] 1.41 5.74 1.87 4.13 1.67 ... #>   Denominator density: num [1:100] 2.93 0.071 1.065 1.59 2.115 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Naive density ratio estimate: #>   Number of variables:  #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Density ratio for numerator samples: num [1:50] 0.344 1.747 0.628 1.419 0.511 ... #>   Density ratio for denominator samples: num [1:100] 1.0751 -2.6454 0.0626 0.464 0.7493 ... #>   #>  #> Squared average log density ratio difference for numerator and denominator samples (SALDRD): 13.56 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> [1] 1.410607 5.739287 1.874031 4.131255 1.666760 4.095855 # Fit model with custom parameters naive(numerator_small, denominator_small, m=2, kernel=\"epanechnikov\") #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small,     m = 2, kernel = \"epanechnikov\") #>  #> Naive density ratio #>   Number of variables: 3 #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Numerator density: num [1:50] 0.572 1.421 0.945 1.058 0.936 ... #>   Denominator density: num [1:100] 1.391 1.459 0.572 0.943 1.314 ... #>"},{"path":"https://thomvolker.github.io/densityratio/reference/predict.spectral.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain predicted density ratio values from a spectral object — predict.spectral","title":"Obtain predicted density ratio values from a spectral object — predict.spectral","text":"Obtain predicted density ratio values spectral object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/predict.spectral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain predicted density ratio values from a spectral object — predict.spectral","text":"","code":"# S3 method for class 'spectral' predict(   object,   newdata = NULL,   sigma = c(\"sigmaopt\", \"all\"),   m = c(\"opt\", \"all\"),   ... )"},{"path":"https://thomvolker.github.io/densityratio/reference/predict.spectral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain predicted density ratio values from a spectral object — predict.spectral","text":"object spectral object newdata Optional matrix new data set compute density sigma scalar Gaussian kernel width m integer indicating dimension eigenvector expansion ... Additional arguments passed function","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/predict.spectral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain predicted density ratio values from a spectral object — predict.spectral","text":"array predicted density ratio values possibly new data, otherwise numerator samples.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/predict.ulsif.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain predicted density ratio values from a ulsif object — predict.ulsif","title":"Obtain predicted density ratio values from a ulsif object — predict.ulsif","text":"Obtain predicted density ratio values ulsif object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/predict.ulsif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain predicted density ratio values from a ulsif object — predict.ulsif","text":"","code":"# S3 method for class 'ulsif' predict(   object,   newdata = NULL,   sigma = c(\"sigmaopt\", \"all\"),   lambda = c(\"lambdaopt\", \"all\"),   ... )"},{"path":"https://thomvolker.github.io/densityratio/reference/predict.ulsif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain predicted density ratio values from a ulsif object — predict.ulsif","text":"object ulsif object newdata Optional matrix new data set compute density sigma scalar Gaussian kernel width lambda scalar regularization parameter ... Additional arguments passed function","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/predict.ulsif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain predicted density ratio values from a ulsif object — predict.ulsif","text":"array predicted density ratio values possibly new data, otherwise numerator samples.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/predict.ulsif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain predicted density ratio values from a ulsif object — predict.ulsif","text":"","code":"set.seed(123) # Fit model dr <- ulsif(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num [1:10] 0.711 1.08 1.333 1.538 1.742 ... #>  #> Regularization parameter (lambda): num [1:20] 1000 483.3 233.6 112.9 54.6 ... #>  #> Optimal sigma (loocv): 1.538158 #> Optimal lambda (loocv): 2.976351 #> Optimal kernel weights (loocv): num [1:151] 0.0666 0.0289 0.0423 0.0442 0.0454 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>  #> Optimal sigma: 1.538158 #> Optimal lambda: 2.976351 #> Optimal kernel weights: num [1:151] 0.0666 0.0289 0.0423 0.0442 0.0454 ... #>   #> Pearson divergence between P(nu) and P(de): 0.3868 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> , , 1 #>  #>           [,1] #> [1,] 0.9838195 #> [2,] 1.2872509 #> [3,] 1.5069634 #> [4,] 1.2804095 #> [5,] 1.0953012 #> [6,] 1.5262485 #>  # Fit model with custom parameters ulsif(numerator_small, denominator_small, sigma = 2, lambda = 2) #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small,     sigma = 2, lambda = 2) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num 2 #>  #> Regularization parameter (lambda): num 2 #>  #> Optimal sigma (loocv): 2 #> Optimal lambda (loocv): 2 #> Optimal kernel weights (loocv): num [1:151] 0.0378 0.0348 0.0554 0.053 0.0619 ... #>"},{"path":"https://thomvolker.github.io/densityratio/reference/print.kliep.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a kliep object — print.kliep","title":"Print a kliep object — print.kliep","text":"Print kliep object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.kliep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a kliep object — print.kliep","text":"","code":"# S3 method for class 'kliep' print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/print.kliep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a kliep object — print.kliep","text":"x Object class kliep. digits Number digits use printing output. ... arguments format number digits.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.kliep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a kliep object — print.kliep","text":"invisble inputted kliep object.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/print.kliep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a kliep object — print.kliep","text":"","code":"set.seed(123) # Fit model dr <- kliep(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> kliep(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num [1:10] 0.711 1.08 1.333 1.538 1.742 ... #>  #> Optimal sigma (5-fold cv): 0.7105 #> Optimal kernel weights (5-fold cv):  num [1:150, 1] 0.476 0.67 0.578 0.678 0.603 ... #>  #> Optimization parameters: #>   Learning rate (epsilon): 1e+01  1e+00  1e-01  1e-02  1e-03  1e-04  1e-05 #>   Maximum number of iterations:  5000 # Obtain summary of model object summary(dr) #>  #> Call: #> kliep(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #> Optimal sigma: 0.7105233 #> Optimal kernel weights: num [1:150, 1] 0.476 0.67 0.578 0.678 0.603 ... #>   #> Kullback-Leibler divergence between P(nu) and P(de): 0.8268 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 16 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 16 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 16 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #>          [,1] #> [1,] 1.432706 #> [2,] 2.696996 #> [3,] 3.600185 #> [4,] 2.715088 #> [5,] 2.219022 #> [6,] 2.930002 # Fit model with custom parameters kliep(numerator_small, denominator_small,       nsigma = 1, ncenters = 100, nfold = 10,       epsilon = 10^{2:-5}, maxit = 500) #>  #> Call: #> kliep(df_numerator = numerator_small, df_denominator = denominator_small,     nsigma = 1, ncenters = 100, nfold = 10, epsilon = 10^{        2:-5    }, maxit = 500) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num 1.85 #>  #> Optimal sigma (10-fold cv): 1.852 #> Optimal kernel weights (10-fold cv):  num [1:100, 1] 0.039 0 0.0659 0 0.0786 ... #>  #> Optimization parameters: #>   Learning rate (epsilon): 1e+02  1e+01  1e+00  1e-01  1e-02  1e-03  1e-04  1e-05 #>   Maximum number of iterations:  500"},{"path":"https://thomvolker.github.io/densityratio/reference/print.kmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a kmm object — print.kmm","title":"Print a kmm object — print.kmm","text":"Print kmm object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.kmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a kmm object — print.kmm","text":"","code":"# S3 method for class 'kmm' print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/print.kmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a kmm object — print.kmm","text":"x Object class kmm. digits Number digits use printing output. ... arguments format number digits.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.kmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a kmm object — print.kmm","text":"invisble inputted kmm object.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/print.kmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a kmm object — print.kmm","text":"","code":"set.seed(123) # Fit model dr <- kmm(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> kmm(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num [1:10] 0.801 1.2 1.483 1.723 1.954 ... #>  #> Optimal sigma (5-fold cv): 3.67 #> Optimal kernel weights (5-fold cv):  num [1:150, 1] 0.23 0.416 -0.166 1.512 0.831 ... #>  #> Optimization parameters: #>   Optimization method:  Unconstrained  #>  # Obtain summary of model object summary(dr) #>  #> Call: #> kmm(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #> Optimal sigma: 3.669758 #> Optimal kernel weights: num [1:150, 1] 0.23 0.416 -0.166 1.512 0.831 ... #>   #> Pearson divergence between P(nu) and P(de): 0.9439 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 19 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 19 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 19 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #>           [,1] #> [1,] 3.1261579 #> [2,] 4.0233887 #> [3,] 3.6868339 #> [4,] 5.5934888 #> [5,] 0.6302996 #> [6,] 1.5225886 # Fit model with custom parameters kmm(numerator_small, denominator_small,     nsigma = 5, ncenters = 100, nfold = 10,     constrained = TRUE) #>  #> Call: #> kmm(df_numerator = numerator_small, df_denominator = denominator_small,     constrained = TRUE, nsigma = 5, ncenters = 100, nfold = 10) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num [1:5] 0.811 1.577 2.094 2.66 3.706 #>  #> Optimal sigma (10-fold cv): 2.094 #> Optimal kernel weights (10-fold cv):  num [1:100, 1] -0.000498 -0.000999 -0.001187 -0.001022 -0.000275 ... #>  #> Optimization parameters: #>   Optimization method:  Constrained  #>"},{"path":"https://thomvolker.github.io/densityratio/reference/print.lhss.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a lhss object — print.lhss","title":"Print a lhss object — print.lhss","text":"Print lhss object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.lhss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a lhss object — print.lhss","text":"","code":"# S3 method for class 'lhss' print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/print.lhss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a lhss object — print.lhss","text":"x Object class lhss. digits Number digits use printing output. ... arguments format number digits.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.lhss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a lhss object — print.lhss","text":"invisble inputted lhss object.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/print.lhss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a lhss object — print.lhss","text":"","code":"set.seed(123) # Fit model (minimal example to limit computation time) dr <- lhss(numerator_small, denominator_small,            nsigma = 5, nlambda = 3, ncenters = 50, maxit = 100) # Inspect model object dr #>  #> Call: #> lhss(df_numerator = numerator_small, df_denominator = denominator_small,     nsigma = 5, nlambda = 3, ncenters = 50, maxit = 100) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 50 #>   sigma: num [1:5, 1:3] 0.00952 0.36681 1.30318 3.4202 10.53644 ... #>  #> Regularization parameter (lambda): num [1:3] 1e+03 1e+00 1e-03 #>  #> Subspace dimension (m): 1 #> Optimal sigma: 0.3841266 #> Optimal lambda: 1 #> Optimal kernel weights (loocv): num [1:51] 0.2707 0.0121 0.097 0.0135 0.0836 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> lhss(df_numerator = numerator_small, df_denominator = denominator_small,     nsigma = 5, nlambda = 3, ncenters = 50, maxit = 100) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 50 #>  #> Subspace dimension (m): 1 #> Optimal sigma: 0.3841266 #> Optimal lambda: 1 #> Optimal kernel weights (loocv): num [1:51] 0.2707 0.0121 0.097 0.0135 0.0836 ... #>   #> Pearson divergence between P(nu) and P(de): 0.2529 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> , , 1 #>  #>           [,1] #> [1,] 0.8873535 #> [2,] 1.0458496 #> [3,] 0.8122089 #> [4,] 0.4962786 #> [5,] 1.3122394 #> [6,] 1.3092069 #>"},{"path":"https://thomvolker.github.io/densityratio/reference/print.naivedensityratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a naivedensityratio object — print.naivedensityratio","title":"Print a naivedensityratio object — print.naivedensityratio","text":"Print naivedensityratio object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.naivedensityratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a naivedensityratio object — print.naivedensityratio","text":"","code":"# S3 method for class 'naivedensityratio' print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/print.naivedensityratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a naivedensityratio object — print.naivedensityratio","text":"x Object class naivesubspacedensityratio. digits Number digits use printing output. ... arguments format number digits.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.naivedensityratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a naivedensityratio object — print.naivedensityratio","text":"invisble inputted naivedensityratio object.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/print.naivedensityratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a naivedensityratio object — print.naivedensityratio","text":"","code":"set.seed(123) # Fit model dr <- naive(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Naive density ratio #>   Number of variables: 3 #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Numerator density: num [1:50] 1.41 5.74 1.87 4.13 1.67 ... #>   Denominator density: num [1:100] 2.93 0.071 1.065 1.59 2.115 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Naive density ratio estimate: #>   Number of variables:  #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Density ratio for numerator samples: num [1:50] 0.344 1.747 0.628 1.419 0.511 ... #>   Density ratio for denominator samples: num [1:100] 1.0751 -2.6454 0.0626 0.464 0.7493 ... #>   #>  #> Squared average log density ratio difference for numerator and denominator samples (SALDRD): 13.56 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> [1] 1.410607 5.739287 1.874031 4.131255 1.666760 4.095855 # Fit model with custom parameters naive(numerator_small, denominator_small, m=2, kernel=\"epanechnikov\") #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small,     m = 2, kernel = \"epanechnikov\") #>  #> Naive density ratio #>   Number of variables: 3 #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Numerator density: num [1:50] 0.572 1.421 0.945 1.058 0.936 ... #>   Denominator density: num [1:100] 1.391 1.459 0.572 0.943 1.314 ... #>"},{"path":"https://thomvolker.github.io/densityratio/reference/print.spectral.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a spectral object — print.spectral","title":"Print a spectral object — print.spectral","text":"Print spectral object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.spectral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a spectral object — print.spectral","text":"","code":"# S3 method for class 'spectral' print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/print.spectral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a spectral object — print.spectral","text":"x Object class spectral. digits Number digits use printing output. ... arguments format number digits.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.spectral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a spectral object — print.spectral","text":"invisble inputted spectral object.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/print.spectral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a spectral object — print.spectral","text":"","code":"set.seed(123) # Fit model dr <- spectral(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> spectral(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num [1:10] 0.807 1.191 1.455 1.688 1.913 ... #>  #>  #> Subspace dimension (J): num [1:50] 1 2 4 6 8 10 11 13 15 17 ... #>  #> Optimal sigma: 3.582214 #> Optimal subspace: 8 #> Optimal kernel weights (cv): num [1:8] 1.0045 -0.6689 -0.0938 0.8499 0.0228 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> spectral(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>  #> Optimal sigma: 3.582214 #> Optimal subspace: 8 #> Optimal kernel weights (cv): num [1:8] 1.0045 -0.6689 -0.0938 0.8499 0.0228 ... #>   #> Pearson divergence between P(nu) and P(de): 0.8063 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 22 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 22 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 22 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> , , 1 #>  #>           [,1] #> [1,] 2.8779372 #> [2,] 3.8658889 #> [3,] 3.7674156 #> [4,] 4.8603842 #> [5,] 0.6970124 #> [6,] 2.1671079 #>  # Fit model with custom parameters spectral(numerator_small, denominator_small, sigma = 2) #>  #> Call: #> spectral(df_numerator = numerator_small, df_denominator = denominator_small,     sigma = 2) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num 2 #>  #>  #> Subspace dimension (J): num [1:50] 1 2 4 6 8 10 11 13 15 17 ... #>  #> Optimal sigma: 2 #> Optimal subspace: 4 #> Optimal kernel weights (cv): num [1:4] 0.98 -0.8324 -0.0561 0.6471 #>"},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.kliep.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a summary.kliep object — print.summary.kliep","title":"Print a summary.kliep object — print.summary.kliep","text":"Print summary.kliep object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.kliep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a summary.kliep object — print.summary.kliep","text":"","code":"# S3 method for class 'summary.kliep' print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.kliep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a summary.kliep object — print.summary.kliep","text":"x Object class summary.kliep. digits Number digits use printing output. ... arguments format number digits.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.kliep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a summary.kliep object — print.summary.kliep","text":"invisble inputted summary.kliep object.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.kliep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a summary.kliep object — print.summary.kliep","text":"","code":"set.seed(123) # Fit model dr <- kliep(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> kliep(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num [1:10] 0.711 1.08 1.333 1.538 1.742 ... #>  #> Optimal sigma (5-fold cv): 0.7105 #> Optimal kernel weights (5-fold cv):  num [1:150, 1] 0.476 0.67 0.578 0.678 0.603 ... #>  #> Optimization parameters: #>   Learning rate (epsilon): 1e+01  1e+00  1e-01  1e-02  1e-03  1e-04  1e-05 #>   Maximum number of iterations:  5000 # Obtain summary of model object summary(dr) #>  #> Call: #> kliep(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #> Optimal sigma: 0.7105233 #> Optimal kernel weights: num [1:150, 1] 0.476 0.67 0.578 0.678 0.603 ... #>   #> Kullback-Leibler divergence between P(nu) and P(de): 0.8268 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 16 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 16 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 16 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #>          [,1] #> [1,] 1.432706 #> [2,] 2.696996 #> [3,] 3.600185 #> [4,] 2.715088 #> [5,] 2.219022 #> [6,] 2.930002 # Fit model with custom parameters kliep(numerator_small, denominator_small,       nsigma = 1, ncenters = 100, nfold = 10,       epsilon = 10^{2:-5}, maxit = 500) #>  #> Call: #> kliep(df_numerator = numerator_small, df_denominator = denominator_small,     nsigma = 1, ncenters = 100, nfold = 10, epsilon = 10^{        2:-5    }, maxit = 500) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num 1.85 #>  #> Optimal sigma (10-fold cv): 1.852 #> Optimal kernel weights (10-fold cv):  num [1:100, 1] 0.039 0 0.0659 0 0.0786 ... #>  #> Optimization parameters: #>   Learning rate (epsilon): 1e+02  1e+01  1e+00  1e-01  1e-02  1e-03  1e-04  1e-05 #>   Maximum number of iterations:  500"},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.kmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a summary.kmm object — print.summary.kmm","title":"Print a summary.kmm object — print.summary.kmm","text":"Print summary.kmm object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.kmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a summary.kmm object — print.summary.kmm","text":"","code":"# S3 method for class 'summary.kmm' print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.kmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a summary.kmm object — print.summary.kmm","text":"x Object class summary.kmm. digits Number digits use printing output. ... arguments format number digits.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.kmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a summary.kmm object — print.summary.kmm","text":"invisble inputted summary.kmm object.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.kmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a summary.kmm object — print.summary.kmm","text":"","code":"set.seed(123) # Fit model dr <- kmm(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> kmm(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num [1:10] 0.801 1.2 1.483 1.723 1.954 ... #>  #> Optimal sigma (5-fold cv): 3.67 #> Optimal kernel weights (5-fold cv):  num [1:150, 1] 0.23 0.416 -0.166 1.512 0.831 ... #>  #> Optimization parameters: #>   Optimization method:  Unconstrained  #>  # Obtain summary of model object summary(dr) #>  #> Call: #> kmm(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #> Optimal sigma: 3.669758 #> Optimal kernel weights: num [1:150, 1] 0.23 0.416 -0.166 1.512 0.831 ... #>   #> Pearson divergence between P(nu) and P(de): 0.9439 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 19 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 19 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 19 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #>           [,1] #> [1,] 3.1261579 #> [2,] 4.0233887 #> [3,] 3.6868339 #> [4,] 5.5934888 #> [5,] 0.6302996 #> [6,] 1.5225886 # Fit model with custom parameters kmm(numerator_small, denominator_small,     nsigma = 5, ncenters = 100, nfold = 10,     constrained = TRUE) #>  #> Call: #> kmm(df_numerator = numerator_small, df_denominator = denominator_small,     constrained = TRUE, nsigma = 5, ncenters = 100, nfold = 10) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num [1:5] 0.811 1.577 2.094 2.66 3.706 #>  #> Optimal sigma (10-fold cv): 2.094 #> Optimal kernel weights (10-fold cv):  num [1:100, 1] -0.000498 -0.000999 -0.001187 -0.001022 -0.000275 ... #>  #> Optimization parameters: #>   Optimization method:  Constrained  #>"},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.lhss.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a summary.lhss object — print.summary.lhss","title":"Print a summary.lhss object — print.summary.lhss","text":"Print summary.lhss object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.lhss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a summary.lhss object — print.summary.lhss","text":"","code":"# S3 method for class 'summary.lhss' print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.lhss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a summary.lhss object — print.summary.lhss","text":"x Object class summary.lhss. digits Number digits use printing output. ... arguments format number digits.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.lhss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a summary.lhss object — print.summary.lhss","text":"invisble inputted summary.lhss object.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.lhss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a summary.lhss object — print.summary.lhss","text":"","code":"set.seed(123) # Fit model (minimal example to limit computation time) dr <- lhss(numerator_small, denominator_small,            nsigma = 5, nlambda = 3, ncenters = 50, maxit = 100) # Inspect model object dr #>  #> Call: #> lhss(df_numerator = numerator_small, df_denominator = denominator_small,     nsigma = 5, nlambda = 3, ncenters = 50, maxit = 100) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 50 #>   sigma: num [1:5, 1:3] 0.00952 0.36681 1.30318 3.4202 10.53644 ... #>  #> Regularization parameter (lambda): num [1:3] 1e+03 1e+00 1e-03 #>  #> Subspace dimension (m): 1 #> Optimal sigma: 0.3841266 #> Optimal lambda: 1 #> Optimal kernel weights (loocv): num [1:51] 0.2707 0.0121 0.097 0.0135 0.0836 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> lhss(df_numerator = numerator_small, df_denominator = denominator_small,     nsigma = 5, nlambda = 3, ncenters = 50, maxit = 100) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 50 #>  #> Subspace dimension (m): 1 #> Optimal sigma: 0.3841266 #> Optimal lambda: 1 #> Optimal kernel weights (loocv): num [1:51] 0.2707 0.0121 0.097 0.0135 0.0836 ... #>   #> Pearson divergence between P(nu) and P(de): 0.2529 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> , , 1 #>  #>           [,1] #> [1,] 0.8873535 #> [2,] 1.0458496 #> [3,] 0.8122089 #> [4,] 0.4962786 #> [5,] 1.3122394 #> [6,] 1.3092069 #>"},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.naivedensityratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a summary.naivedensityratio object — print.summary.naivedensityratio","title":"Print a summary.naivedensityratio object — print.summary.naivedensityratio","text":"Print summary.naivedensityratio object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.naivedensityratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a summary.naivedensityratio object — print.summary.naivedensityratio","text":"","code":"# S3 method for class 'summary.naivedensityratio' print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.naivedensityratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a summary.naivedensityratio object — print.summary.naivedensityratio","text":"x Object class summary.naivedensityratio. digits Number digits use printing output. ... arguments format number digits.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.naivedensityratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a summary.naivedensityratio object — print.summary.naivedensityratio","text":"invisble inputted summary.naivedensityratio object.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.naivedensityratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a summary.naivedensityratio object — print.summary.naivedensityratio","text":"","code":"set.seed(123) # Fit model dr <- naive(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Naive density ratio #>   Number of variables: 3 #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Numerator density: num [1:50] 1.41 5.74 1.87 4.13 1.67 ... #>   Denominator density: num [1:100] 2.93 0.071 1.065 1.59 2.115 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Naive density ratio estimate: #>   Number of variables:  #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Density ratio for numerator samples: num [1:50] 0.344 1.747 0.628 1.419 0.511 ... #>   Density ratio for denominator samples: num [1:100] 1.0751 -2.6454 0.0626 0.464 0.7493 ... #>   #>  #> Squared average log density ratio difference for numerator and denominator samples (SALDRD): 13.56 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> [1] 1.410607 5.739287 1.874031 4.131255 1.666760 4.095855 # Fit model with custom parameters naive(numerator_small, denominator_small, m=2, kernel=\"epanechnikov\") #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small,     m = 2, kernel = \"epanechnikov\") #>  #> Naive density ratio #>   Number of variables: 3 #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Numerator density: num [1:50] 0.572 1.421 0.945 1.058 0.936 ... #>   Denominator density: num [1:100] 1.391 1.459 0.572 0.943 1.314 ... #>"},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.spectral.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a summary.spectral object — print.summary.spectral","title":"Print a summary.spectral object — print.summary.spectral","text":"Print summary.spectral object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.spectral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a summary.spectral object — print.summary.spectral","text":"","code":"# S3 method for class 'summary.spectral' print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.spectral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a summary.spectral object — print.summary.spectral","text":"x Object class summary.spectral. digits Number digits use printing output. ... arguments format number digits.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.spectral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a summary.spectral object — print.summary.spectral","text":"invisble inputted summary.spectral object.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.spectral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a summary.spectral object — print.summary.spectral","text":"","code":"set.seed(123) # Fit model dr <- spectral(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> spectral(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num [1:10] 0.807 1.191 1.455 1.688 1.913 ... #>  #>  #> Subspace dimension (J): num [1:50] 1 2 4 6 8 10 11 13 15 17 ... #>  #> Optimal sigma: 3.582214 #> Optimal subspace: 8 #> Optimal kernel weights (cv): num [1:8] 1.0045 -0.6689 -0.0938 0.8499 0.0228 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> spectral(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>  #> Optimal sigma: 3.582214 #> Optimal subspace: 8 #> Optimal kernel weights (cv): num [1:8] 1.0045 -0.6689 -0.0938 0.8499 0.0228 ... #>   #> Pearson divergence between P(nu) and P(de): 0.8063 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 22 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 22 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 22 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> , , 1 #>  #>           [,1] #> [1,] 2.8779372 #> [2,] 3.8658889 #> [3,] 3.7674156 #> [4,] 4.8603842 #> [5,] 0.6970124 #> [6,] 2.1671079 #>  # Fit model with custom parameters spectral(numerator_small, denominator_small, sigma = 2) #>  #> Call: #> spectral(df_numerator = numerator_small, df_denominator = denominator_small,     sigma = 2) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num 2 #>  #>  #> Subspace dimension (J): num [1:50] 1 2 4 6 8 10 11 13 15 17 ... #>  #> Optimal sigma: 2 #> Optimal subspace: 4 #> Optimal kernel weights (cv): num [1:4] 0.98 -0.8324 -0.0561 0.6471 #>"},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.ulsif.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a summary.ulsif object — print.summary.ulsif","title":"Print a summary.ulsif object — print.summary.ulsif","text":"Print summary.ulsif object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.ulsif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a summary.ulsif object — print.summary.ulsif","text":"","code":"# S3 method for class 'summary.ulsif' print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.ulsif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a summary.ulsif object — print.summary.ulsif","text":"x Object class summary.ulsif. digits Number digits use printing output. ... arguments format number digits.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.ulsif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a summary.ulsif object — print.summary.ulsif","text":"invisble inputted summary.ulsif object.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/print.summary.ulsif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a summary.ulsif object — print.summary.ulsif","text":"","code":"set.seed(123) # Fit model dr <- ulsif(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num [1:10] 0.711 1.08 1.333 1.538 1.742 ... #>  #> Regularization parameter (lambda): num [1:20] 1000 483.3 233.6 112.9 54.6 ... #>  #> Optimal sigma (loocv): 1.538158 #> Optimal lambda (loocv): 2.976351 #> Optimal kernel weights (loocv): num [1:151] 0.0666 0.0289 0.0423 0.0442 0.0454 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>  #> Optimal sigma: 1.538158 #> Optimal lambda: 2.976351 #> Optimal kernel weights: num [1:151] 0.0666 0.0289 0.0423 0.0442 0.0454 ... #>   #> Pearson divergence between P(nu) and P(de): 0.3868 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> , , 1 #>  #>           [,1] #> [1,] 0.9838195 #> [2,] 1.2872509 #> [3,] 1.5069634 #> [4,] 1.2804095 #> [5,] 1.0953012 #> [6,] 1.5262485 #>  # Fit model with custom parameters ulsif(numerator_small, denominator_small, sigma = 2, lambda = 2) #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small,     sigma = 2, lambda = 2) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num 2 #>  #> Regularization parameter (lambda): num 2 #>  #> Optimal sigma (loocv): 2 #> Optimal lambda (loocv): 2 #> Optimal kernel weights (loocv): num [1:151] 0.0378 0.0348 0.0554 0.053 0.0619 ... #>"},{"path":"https://thomvolker.github.io/densityratio/reference/print.ulsif.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a ulsif object — print.ulsif","title":"Print a ulsif object — print.ulsif","text":"Print ulsif object","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.ulsif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a ulsif object — print.ulsif","text":"","code":"# S3 method for class 'ulsif' print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"https://thomvolker.github.io/densityratio/reference/print.ulsif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a ulsif object — print.ulsif","text":"x Object class ulsif. digits Number digits use printing output. ... arguments format number digits.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/print.ulsif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a ulsif object — print.ulsif","text":"invisble inputted ulsif object.","code":""},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/reference/print.ulsif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a ulsif object — print.ulsif","text":"","code":"set.seed(123) # Fit model dr <- ulsif(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num [1:10] 0.711 1.08 1.333 1.538 1.742 ... #>  #> Regularization parameter (lambda): num [1:20] 1000 483.3 233.6 112.9 54.6 ... #>  #> Optimal sigma (loocv): 1.538158 #> Optimal lambda (loocv): 2.976351 #> Optimal kernel weights (loocv): num [1:151] 0.0666 0.0289 0.0423 0.0442 0.0454 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>  #> Optimal sigma: 1.538158 #> Optimal lambda: 2.976351 #> Optimal kernel weights: num [1:151] 0.0666 0.0289 0.0423 0.0442 0.0454 ... #>   #> Pearson divergence between P(nu) and P(de): 0.3868 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> , , 1 #>  #>           [,1] #> [1,] 0.9838195 #> [2,] 1.2872509 #> [3,] 1.5069634 #> [4,] 1.2804095 #> [5,] 1.0953012 #> [6,] 1.5262485 #>  # Fit model with custom parameters ulsif(numerator_small, denominator_small, sigma = 2, lambda = 2) #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small,     sigma = 2, lambda = 2) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num 2 #>  #> Regularization parameter (lambda): num 2 #>  #> Optimal sigma (loocv): 2 #> Optimal lambda (loocv): 2 #> Optimal kernel weights (loocv): num [1:151] 0.0378 0.0348 0.0554 0.053 0.0619 ... #>"},{"path":"https://thomvolker.github.io/densityratio/reference/spectral.html","id":null,"dir":"Reference","previous_headings":"","what":"Spectral series based density ratio estimation — spectral","title":"Spectral series based density ratio estimation — spectral","text":"Spectral series based density ratio estimation","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/spectral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spectral series based density ratio estimation — spectral","text":"","code":"spectral(   df_numerator,   df_denominator,   m = NULL,   scale = \"numerator\",   nsigma = 10,   sigma_quantile = NULL,   sigma = NULL,   ncenters = NULL,   cv = TRUE,   nfold = 10,   parallel = FALSE,   nthreads = NULL,   progressbar = TRUE )"},{"path":"https://thomvolker.github.io/densityratio/reference/spectral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spectral series based density ratio estimation — spectral","text":"df_numerator data.frame exclusively numeric variables numerator samples df_denominator data.frame exclusively numeric variables denominator samples (must variables df_denominator) m Integer vector indicating number eigenvectors use spectral series expansion. Defaults 50 evenly spaced values 1 number denominator samples (largest number samples can used centers cross-validation scheme). scale \"numerator\", \"denominator\", NULL, indicating whether standardize numeric variable according numerator means standard deviations, denominator means standard deviations, apply standardization . nsigma Integer indicating number sigma values (bandwidth parameter Gaussian kernel gram matrix) use cross-validation. sigma_quantile NULL numeric vector probabilities calculate quantiles distance matrix obtain sigma values. NULL, nsigma values 0.05 0.95 used. sigma NULL scalar value determine bandwidth Gaussian kernel gram matrix. NULL, nsigma values 0.05 0.95 used. ncenters integer smaller number denominator observations, approximation eigenvector expansion based ncenters samples performed, instead full expansion. can useful large datasets. Defaults NULL, denominator samples used. cv logical indicating whether use cross-validation determine optimal sigma value optimal number eigenvectors. nfold Integer indicating number folds use cross-validation scheme. cv FALSE, parameter ignored. parallel logical indicating whether use parallel processing cross-validation scheme. nthreads NULL integer indicating number threads use parallel processing. parallel processing enabled, defaults number available threads minus one. progressbar Logical indicating whether display progressbar.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/spectral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spectral series based density ratio estimation — spectral","text":"spectral-object, containing information calculate density ratio using optimal sigma optimal spectral series expansion.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/spectral.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spectral series based density ratio estimation — spectral","text":"Izbicki, R., Lee, . & Schafer, C. (2014). High-Dimensional Density Ratio Estimation Extensions Approximate Likelihood Computation. Proceedings Machine Learning Research 33, 420-429. Available https://proceedings.mlr.press/v33/izbicki14.html.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/spectral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spectral series based density ratio estimation — spectral","text":"","code":"set.seed(123) # Fit model dr <- spectral(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> spectral(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num [1:10] 0.807 1.191 1.455 1.688 1.913 ... #>  #>  #> Subspace dimension (J): num [1:50] 1 2 4 6 8 10 11 13 15 17 ... #>  #> Optimal sigma: 3.582214 #> Optimal subspace: 8 #> Optimal kernel weights (cv): num [1:8] 1.0045 -0.6689 -0.0938 0.8499 0.0228 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> spectral(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>  #> Optimal sigma: 3.582214 #> Optimal subspace: 8 #> Optimal kernel weights (cv): num [1:8] 1.0045 -0.6689 -0.0938 0.8499 0.0228 ... #>   #> Pearson divergence between P(nu) and P(de): 0.8063 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 22 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 22 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 22 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> , , 1 #>  #>           [,1] #> [1,] 2.8779372 #> [2,] 3.8658889 #> [3,] 3.7674156 #> [4,] 4.8603842 #> [5,] 0.6970124 #> [6,] 2.1671079 #>  # Fit model with custom parameters spectral(numerator_small, denominator_small, sigma = 2) #>  #> Call: #> spectral(df_numerator = numerator_small, df_denominator = denominator_small,     sigma = 2) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num 2 #>  #>  #> Subspace dimension (J): num [1:50] 1 2 4 6 8 10 11 13 15 17 ... #>  #> Optimal sigma: 2 #> Optimal subspace: 4 #> Optimal kernel weights (cv): num [1:4] 0.98 -0.8324 -0.0561 0.6471 #>"},{"path":"https://thomvolker.github.io/densityratio/reference/summary.kliep.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract summary from kliep object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.kliep","title":"Extract summary from kliep object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.kliep","text":"Extract summary kliep object, including two-sample significance test homogeneity numerator denominator samples","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.kliep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract summary from kliep object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.kliep","text":"","code":"# S3 method for class 'kliep' summary(   object,   test = FALSE,   n_perm = 100,   parallel = FALSE,   cluster = NULL,   min_pred = 1e-06,   ... )"},{"path":"https://thomvolker.github.io/densityratio/reference/summary.kliep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract summary from kliep object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.kliep","text":"object Object class kliep test logical indicating whether statistically test homogeneity numerator denominator samples. n_perm Scalar indicating number permutation samples parallel logical indicating run permutation test parallel cluster NULL cluster object created makeCluster. NULL parallel = TRUE, uses number available cores minus 1. min_pred Scalar indicating minimum value predicted density ratio values (used divergence statistic) avoid negative density ratio values. ... arguments passed methods.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.kliep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract summary from kliep object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.kliep","text":"Summary fitted density ratio model","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.kliep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract summary from kliep object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.kliep","text":"","code":"set.seed(123) # Fit model dr <- kliep(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> kliep(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num [1:10] 0.711 1.08 1.333 1.538 1.742 ... #>  #> Optimal sigma (5-fold cv): 0.7105 #> Optimal kernel weights (5-fold cv):  num [1:150, 1] 0.476 0.67 0.578 0.678 0.603 ... #>  #> Optimization parameters: #>   Learning rate (epsilon): 1e+01  1e+00  1e-01  1e-02  1e-03  1e-04  1e-05 #>   Maximum number of iterations:  5000 # Obtain summary of model object summary(dr) #>  #> Call: #> kliep(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #> Optimal sigma: 0.7105233 #> Optimal kernel weights: num [1:150, 1] 0.476 0.67 0.578 0.678 0.603 ... #>   #> Kullback-Leibler divergence between P(nu) and P(de): 0.8268 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 16 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 16 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 16 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #>          [,1] #> [1,] 1.432706 #> [2,] 2.696996 #> [3,] 3.600185 #> [4,] 2.715088 #> [5,] 2.219022 #> [6,] 2.930002 # Fit model with custom parameters kliep(numerator_small, denominator_small,       nsigma = 1, ncenters = 100, nfold = 10,       epsilon = 10^{2:-5}, maxit = 500) #>  #> Call: #> kliep(df_numerator = numerator_small, df_denominator = denominator_small,     nsigma = 1, ncenters = 100, nfold = 10, epsilon = 10^{        2:-5    }, maxit = 500) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num 1.85 #>  #> Optimal sigma (10-fold cv): 1.852 #> Optimal kernel weights (10-fold cv):  num [1:100, 1] 0.039 0 0.0659 0 0.0786 ... #>  #> Optimization parameters: #>   Learning rate (epsilon): 1e+02  1e+01  1e+00  1e-01  1e-02  1e-03  1e-04  1e-05 #>   Maximum number of iterations:  500"},{"path":"https://thomvolker.github.io/densityratio/reference/summary.kmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract summary from kmm object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.kmm","title":"Extract summary from kmm object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.kmm","text":"Extract summary kmm object, including two-sample significance test homogeneity numerator denominator samples","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.kmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract summary from kmm object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.kmm","text":"","code":"# S3 method for class 'kmm' summary(   object,   test = FALSE,   n_perm = 100,   parallel = FALSE,   cluster = NULL,   min_pred = 1e-06,   ... )"},{"path":"https://thomvolker.github.io/densityratio/reference/summary.kmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract summary from kmm object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.kmm","text":"object Object class kmm test logical indicating whether statistically test homogeneity numerator denominator samples. n_perm Scalar indicating number permutation samples parallel logical indicating run permutation test parallel cluster NULL cluster object created makeCluster. NULL parallel = TRUE, uses number available cores minus 1. min_pred Scalar indicating minimum value predicted density ratio values (used divergence statistic) avoid negative density ratio values. ... arguments passed methods.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.kmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract summary from kmm object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.kmm","text":"Summary fitted density ratio model","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.kmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract summary from kmm object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.kmm","text":"","code":"set.seed(123) # Fit model dr <- kmm(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> kmm(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num [1:10] 0.801 1.2 1.483 1.723 1.954 ... #>  #> Optimal sigma (5-fold cv): 3.67 #> Optimal kernel weights (5-fold cv):  num [1:150, 1] 0.23 0.416 -0.166 1.512 0.831 ... #>  #> Optimization parameters: #>   Optimization method:  Unconstrained  #>  # Obtain summary of model object summary(dr) #>  #> Call: #> kmm(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #> Optimal sigma: 3.669758 #> Optimal kernel weights: num [1:150, 1] 0.23 0.416 -0.166 1.512 0.831 ... #>   #> Pearson divergence between P(nu) and P(de): 0.9439 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 19 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 19 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 19 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #>           [,1] #> [1,] 3.1261579 #> [2,] 4.0233887 #> [3,] 3.6868339 #> [4,] 5.5934888 #> [5,] 0.6302996 #> [6,] 1.5225886 # Fit model with custom parameters kmm(numerator_small, denominator_small,     nsigma = 5, ncenters = 100, nfold = 10,     constrained = TRUE) #>  #> Call: #> kmm(df_numerator = numerator_small, df_denominator = denominator_small,     constrained = TRUE, nsigma = 5, ncenters = 100, nfold = 10) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num [1:5] 0.811 1.577 2.094 2.66 3.706 #>  #> Optimal sigma (10-fold cv): 2.094 #> Optimal kernel weights (10-fold cv):  num [1:100, 1] -0.000498 -0.000999 -0.001187 -0.001022 -0.000275 ... #>  #> Optimization parameters: #>   Optimization method:  Constrained  #>"},{"path":"https://thomvolker.github.io/densityratio/reference/summary.lhss.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract summary from lhss object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.lhss","title":"Extract summary from lhss object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.lhss","text":"Extract summary lhss object, including two-sample significance test homogeneity numerator denominator samples","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.lhss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract summary from lhss object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.lhss","text":"","code":"# S3 method for class 'lhss' summary(   object,   test = FALSE,   n_perm = 100,   parallel = FALSE,   cluster = NULL,   ... )"},{"path":"https://thomvolker.github.io/densityratio/reference/summary.lhss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract summary from lhss object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.lhss","text":"object Object class lhss test logical indicating whether statistically test homogeneity numerator denominator samples. n_perm Scalar indicating number permutation samples parallel logical indicating run permutation test parallel cluster NULL cluster object created makeCluster. NULL parallel = TRUE, uses number available cores minus 1. ... arguments passed methods.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.lhss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract summary from lhss object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.lhss","text":"Summary fitted density ratio model","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.lhss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract summary from lhss object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.lhss","text":"","code":"set.seed(123) # Fit model (minimal example to limit computation time) dr <- lhss(numerator_small, denominator_small,            nsigma = 5, nlambda = 3, ncenters = 50, maxit = 100) # Inspect model object dr #>  #> Call: #> lhss(df_numerator = numerator_small, df_denominator = denominator_small,     nsigma = 5, nlambda = 3, ncenters = 50, maxit = 100) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 50 #>   sigma: num [1:5, 1:3] 0.00952 0.36681 1.30318 3.4202 10.53644 ... #>  #> Regularization parameter (lambda): num [1:3] 1e+03 1e+00 1e-03 #>  #> Subspace dimension (m): 1 #> Optimal sigma: 0.3841266 #> Optimal lambda: 1 #> Optimal kernel weights (loocv): num [1:51] 0.2707 0.0121 0.097 0.0135 0.0836 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> lhss(df_numerator = numerator_small, df_denominator = denominator_small,     nsigma = 5, nlambda = 3, ncenters = 50, maxit = 100) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 50 #>  #> Subspace dimension (m): 1 #> Optimal sigma: 0.3841266 #> Optimal lambda: 1 #> Optimal kernel weights (loocv): num [1:51] 0.2707 0.0121 0.097 0.0135 0.0836 ... #>   #> Pearson divergence between P(nu) and P(de): 0.2529 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> , , 1 #>  #>           [,1] #> [1,] 0.8873535 #> [2,] 1.0458496 #> [3,] 0.8122089 #> [4,] 0.4962786 #> [5,] 1.3122394 #> [6,] 1.3092069 #>"},{"path":"https://thomvolker.github.io/densityratio/reference/summary.naivedensityratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract summary from naivedensityraito object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.naivedensityratio","title":"Extract summary from naivedensityraito object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.naivedensityratio","text":"Extract summary naivedensityraito object, including two-sample significance test homogeneity numerator denominator samples","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.naivedensityratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract summary from naivedensityraito object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.naivedensityratio","text":"","code":"# S3 method for class 'naivedensityratio' summary(   object,   test = FALSE,   n_perm = 100,   parallel = FALSE,   cluster = NULL,   ... )"},{"path":"https://thomvolker.github.io/densityratio/reference/summary.naivedensityratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract summary from naivedensityraito object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.naivedensityratio","text":"object Object class naivedensityratio test logical indicating whether statistically test homogeneity numerator denominator samples. n_perm Scalar indicating number permutation samples parallel logical indicating run permutation test parallel cluster NULL cluster object created makeCluster. NULL parallel = TRUE, uses number available cores minus 1. ... arguments passed methods.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.naivedensityratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract summary from naivedensityraito object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.naivedensityratio","text":"Summary fitted density ratio model","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.naivedensityratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract summary from naivedensityraito object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.naivedensityratio","text":"","code":"set.seed(123) # Fit model dr <- naive(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Naive density ratio #>   Number of variables: 3 #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Numerator density: num [1:50] 1.41 5.74 1.87 4.13 1.67 ... #>   Denominator density: num [1:100] 2.93 0.071 1.065 1.59 2.115 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Naive density ratio estimate: #>   Number of variables:  #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Density ratio for numerator samples: num [1:50] 0.344 1.747 0.628 1.419 0.511 ... #>   Density ratio for denominator samples: num [1:100] 1.0751 -2.6454 0.0626 0.464 0.7493 ... #>   #>  #> Squared average log density ratio difference for numerator and denominator samples (SALDRD): 13.56 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 25 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> [1] 1.410607 5.739287 1.874031 4.131255 1.666760 4.095855 # Fit model with custom parameters naive(numerator_small, denominator_small, m=2, kernel=\"epanechnikov\") #>  #> Call: #> naive(df_numerator = numerator_small, df_denominator = denominator_small,     m = 2, kernel = \"epanechnikov\") #>  #> Naive density ratio #>   Number of variables: 3 #>   Number of numerator samples: 50 #>   Number of denominator samples: 100 #>   Numerator density: num [1:50] 0.572 1.421 0.945 1.058 0.936 ... #>   Denominator density: num [1:100] 1.391 1.459 0.572 0.943 1.314 ... #>"},{"path":"https://thomvolker.github.io/densityratio/reference/summary.spectral.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract summary from spectral object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.spectral","title":"Extract summary from spectral object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.spectral","text":"Extract summary spectral object, including two-sample significance test homogeneity numerator denominator samples","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.spectral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract summary from spectral object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.spectral","text":"","code":"# S3 method for class 'spectral' summary(   object,   test = FALSE,   n_perm = 100,   parallel = FALSE,   cluster = NULL,   ... )"},{"path":"https://thomvolker.github.io/densityratio/reference/summary.spectral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract summary from spectral object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.spectral","text":"object Object class spectral test logical indicating whether statistically test homogeneity numerator denominator samples. n_perm Scalar indicating number permutation samples parallel logical indicating run permutation test parallel cluster NULL cluster object created makeCluster. NULL parallel = TRUE, uses number available cores minus 1. ... arguments passed methods.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.spectral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract summary from spectral object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.spectral","text":"Summary fitted density ratio model","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.spectral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract summary from spectral object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.spectral","text":"","code":"set.seed(123) # Fit model dr <- spectral(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> spectral(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num [1:10] 0.807 1.191 1.455 1.688 1.913 ... #>  #>  #> Subspace dimension (J): num [1:50] 1 2 4 6 8 10 11 13 15 17 ... #>  #> Optimal sigma: 3.582214 #> Optimal subspace: 8 #> Optimal kernel weights (cv): num [1:8] 1.0045 -0.6689 -0.0938 0.8499 0.0228 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> spectral(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>  #> Optimal sigma: 3.582214 #> Optimal subspace: 8 #> Optimal kernel weights (cv): num [1:8] 1.0045 -0.6689 -0.0938 0.8499 0.0228 ... #>   #> Pearson divergence between P(nu) and P(de): 0.8063 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 22 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 22 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 22 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> , , 1 #>  #>           [,1] #> [1,] 2.8779372 #> [2,] 3.8658889 #> [3,] 3.7674156 #> [4,] 4.8603842 #> [5,] 0.6970124 #> [6,] 2.1671079 #>  # Fit model with custom parameters spectral(numerator_small, denominator_small, sigma = 2) #>  #> Call: #> spectral(df_numerator = numerator_small, df_denominator = denominator_small,     sigma = 2) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 100 #>   sigma: num 2 #>  #>  #> Subspace dimension (J): num [1:50] 1 2 4 6 8 10 11 13 15 17 ... #>  #> Optimal sigma: 2 #> Optimal subspace: 4 #> Optimal kernel weights (cv): num [1:4] 0.98 -0.8324 -0.0561 0.6471 #>"},{"path":"https://thomvolker.github.io/densityratio/reference/summary.ulsif.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract summary from ulsif object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.ulsif","title":"Extract summary from ulsif object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.ulsif","text":"Extract summary ulsif object, including two-sample significance test homogeneity numerator denominator samples","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.ulsif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract summary from ulsif object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.ulsif","text":"","code":"# S3 method for class 'ulsif' summary(   object,   test = FALSE,   n_perm = 100,   parallel = FALSE,   cluster = NULL,   ... )"},{"path":"https://thomvolker.github.io/densityratio/reference/summary.ulsif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract summary from ulsif object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.ulsif","text":"object Object class ulsif test logical indicating whether statistically test homogeneity numerator denominator samples. n_perm Scalar indicating number permutation samples parallel logical indicating run permutation test parallel cluster NULL cluster object created makeCluster. NULL parallel = TRUE, uses number available cores minus 1. ... arguments passed methods.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.ulsif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract summary from ulsif object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.ulsif","text":"Summary fitted density ratio model","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/summary.ulsif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract summary from ulsif object, including two-sample significance test for homogeneity of the numerator and denominator samples — summary.ulsif","text":"","code":"set.seed(123) # Fit model dr <- ulsif(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num [1:10] 0.711 1.08 1.333 1.538 1.742 ... #>  #> Regularization parameter (lambda): num [1:20] 1000 483.3 233.6 112.9 54.6 ... #>  #> Optimal sigma (loocv): 1.538158 #> Optimal lambda (loocv): 2.976351 #> Optimal kernel weights (loocv): num [1:151] 0.0666 0.0289 0.0423 0.0442 0.0454 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>  #> Optimal sigma: 1.538158 #> Optimal lambda: 2.976351 #> Optimal kernel weights: num [1:151] 0.0666 0.0289 0.0423 0.0442 0.0454 ... #>   #> Pearson divergence between P(nu) and P(de): 0.3868 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> , , 1 #>  #>           [,1] #> [1,] 0.9838195 #> [2,] 1.2872509 #> [3,] 1.5069634 #> [4,] 1.2804095 #> [5,] 1.0953012 #> [6,] 1.5262485 #>  # Fit model with custom parameters ulsif(numerator_small, denominator_small, sigma = 2, lambda = 2) #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small,     sigma = 2, lambda = 2) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num 2 #>  #> Regularization parameter (lambda): num 2 #>  #> Optimal sigma (loocv): 2 #> Optimal lambda (loocv): 2 #> Optimal kernel weights (loocv): num [1:151] 0.0378 0.0348 0.0554 0.053 0.0619 ... #>"},{"path":"https://thomvolker.github.io/densityratio/reference/ulsif.html","id":null,"dir":"Reference","previous_headings":"","what":"Unconstrained least-squares importance fitting — ulsif","title":"Unconstrained least-squares importance fitting — ulsif","text":"Unconstrained least-squares importance fitting","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/ulsif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unconstrained least-squares importance fitting — ulsif","text":"","code":"ulsif(   df_numerator,   df_denominator,   intercept = TRUE,   scale = \"numerator\",   nsigma = 10,   sigma_quantile = NULL,   sigma = NULL,   nlambda = 20,   lambda = NULL,   ncenters = 200,   centers = NULL,   parallel = FALSE,   nthreads = NULL,   progressbar = TRUE )"},{"path":"https://thomvolker.github.io/densityratio/reference/ulsif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unconstrained least-squares importance fitting — ulsif","text":"df_numerator data.frame exclusively numeric variables numerator samples df_denominator data.frame exclusively numeric variables denominator samples (must variables df_denominator) intercept logical Indicating whether include intercept term model. Defaults TRUE. scale \"numerator\", \"denominator\", NULL, indicating whether standardize numeric variable according numerator means standard deviations, denominator means standard deviations, apply standardization . nsigma Integer indicating number sigma values (bandwidth parameter Gaussian kernel gram matrix) use cross-validation. sigma_quantile NULL numeric vector probabilities calculate quantiles distance matrix obtain sigma values. NULL, nsigma values 0.05 0.95 used. sigma NULL scalar value determine bandwidth Gaussian kernel gram matrix. NULL, nsigma values 0.05 0.95 used. nlambda Integer indicating number lambda values (regularization parameter), default, lambda set 10^seq(3, -3, length.= nlambda). lambda NULL numeric vector indicating lambda values use cross-validation ncenters Maximum number Gaussian centers kernel gram matrix. Defaults numerator samples. centers NULL numeric matrix dimensions data, indicating centers Gaussian kernel gram matrix. parallel logical indicating whether use parallel processing cross-validation scheme. nthreads NULL integer indicating number threads use parallel processing. parallel processing enabled, defaults number available threads minus one. progressbar Logical indicating whether display progressbar.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/ulsif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unconstrained least-squares importance fitting — ulsif","text":"ulsif-object, containing information calculate density ratio using optimal sigma optimal weights.","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/ulsif.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Unconstrained least-squares importance fitting — ulsif","text":"Kanamori, T., Hido, S., & Sugiyama, M. (2009). least-squares approach direct importance estimation. Journal Machine Learning Research, 10, 1391-1445. Available https://jmlr.org/papers/v10/kanamori09a.html","code":""},{"path":"https://thomvolker.github.io/densityratio/reference/ulsif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unconstrained least-squares importance fitting — ulsif","text":"","code":"set.seed(123) # Fit model dr <- ulsif(numerator_small, denominator_small) # Inspect model object dr #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num [1:10] 0.711 1.08 1.333 1.538 1.742 ... #>  #> Regularization parameter (lambda): num [1:20] 1000 483.3 233.6 112.9 54.6 ... #>  #> Optimal sigma (loocv): 1.538158 #> Optimal lambda (loocv): 2.976351 #> Optimal kernel weights (loocv): num [1:151] 0.0666 0.0289 0.0423 0.0442 0.0454 ... #>   # Obtain summary of model object summary(dr) #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>  #> Optimal sigma: 1.538158 #> Optimal lambda: 2.976351 #> Optimal kernel weights: num [1:151] 0.0666 0.0289 0.0423 0.0442 0.0454 ... #>   #> Pearson divergence between P(nu) and P(de): 0.3868 #> For a two-sample homogeneity test, use 'summary(x, test = TRUE)'. #>  # Plot model object plot(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  # Plot density ratio for each variable individually plot_univariate(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Plot density ratio for each pair of variables plot_bivariate(dr) #> Warning: Negative estimated density ratios for 2 observation(s) converted to 0.01 before applying logarithmic transformation #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  # Predict density ratio and inspect first 6 predictions head(predict(dr)) #> , , 1 #>  #>           [,1] #> [1,] 0.9838195 #> [2,] 1.2872509 #> [3,] 1.5069634 #> [4,] 1.2804095 #> [5,] 1.0953012 #> [6,] 1.5262485 #>  # Fit model with custom parameters ulsif(numerator_small, denominator_small, sigma = 2, lambda = 2) #>  #> Call: #> ulsif(df_numerator = numerator_small, df_denominator = denominator_small,     sigma = 2, lambda = 2) #>  #> Kernel Information: #>   Kernel type: Gaussian with L2 norm distances #>   Number of kernels: 150 #>   sigma: num 2 #>  #> Regularization parameter (lambda): num 2 #>  #> Optimal sigma (loocv): 2 #> Optimal lambda (loocv): 2 #> Optimal kernel weights (loocv): num [1:151] 0.0378 0.0348 0.0554 0.053 0.0619 ... #>"},{"path":[]},{"path":"https://thomvolker.github.io/densityratio/news/index.html","id":"densityratio-020","dir":"Changelog","previous_headings":"","what":"densityratio 0.2.0","title":"densityratio 0.2.0","text":"CRAN release: 2025-05-19 First CRAN release densityratio package. Estimation methods kliep(), kmm(), lhss(), naive(), spectral(), ulsif(). Cross-validation methods incorporated (except naive). S3 methods predict(), plot(), print() summary() incorporated. Extensive checks input data parameters. Test files methods. Added NEWS.md file track changes package.","code":""}]
